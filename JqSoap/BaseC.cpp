/* BaseC.cpp
   Generated by gSOAP 2.8.10 from BaseInterface.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "BaseH.h"

SOAP_SOURCE_STAMP("@(#) BaseC.cpp ver 2.8.10 2016-11-25 01:29:21 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_in_unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		return soap_in_nsCXF__getDataCxfResponse(soap, NULL, NULL, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_nsCXF__getDataCxf:
		return soap_in_nsCXF__getDataCxf(soap, NULL, NULL, "nsCXF:getDataCxf");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__CtrlVideoRecord:
		return soap_in_ns__CtrlVideoRecord(soap, NULL, NULL, "ns:CtrlVideoRecord");
	case SOAP_TYPE_ns__AbandonVideoDownSIP:
		return soap_in_ns__AbandonVideoDownSIP(soap, NULL, NULL, "ns:AbandonVideoDownSIP");
	case SOAP_TYPE_ns__AbandonVideoRecordSIP:
		return soap_in_ns__AbandonVideoRecordSIP(soap, NULL, NULL, "ns:AbandonVideoRecordSIP");
	case SOAP_TYPE_ns__DownloadVideoRecordSIP:
		return soap_in_ns__DownloadVideoRecordSIP(soap, NULL, NULL, "ns:DownloadVideoRecordSIP");
	case SOAP_TYPE_ns__DownloadVideoRecordSIPResponse:
		return soap_in_ns__DownloadVideoRecordSIPResponse(soap, NULL, NULL, "ns:DownloadVideoRecordSIPResponse");
	case SOAP_TYPE_ns__PlayVideoRecordSIP:
		return soap_in_ns__PlayVideoRecordSIP(soap, NULL, NULL, "ns:PlayVideoRecordSIP");
	case SOAP_TYPE_ns__PlayVideoRecordSIPResponse:
		return soap_in_ns__PlayVideoRecordSIPResponse(soap, NULL, NULL, "ns:PlayVideoRecordSIPResponse");
	case SOAP_TYPE_ns__HBOperate:
		return soap_in_ns__HBOperate(soap, NULL, NULL, "ns:HBOperate");
	case SOAP_TYPE_ns__HBOperateResponse:
		return soap_in_ns__HBOperateResponse(soap, NULL, NULL, "ns:HBOperateResponse");
	case SOAP_TYPE_ns__NetMaster:
		return soap_in_ns__NetMaster(soap, NULL, NULL, "ns:NetMaster");
	case SOAP_TYPE_ns__NetMasterResponse:
		return soap_in_ns__NetMasterResponse(soap, NULL, NULL, "ns:NetMasterResponse");
	case SOAP_TYPE_ns__AutoSysUpdate:
		return soap_in_ns__AutoSysUpdate(soap, NULL, NULL, "ns:AutoSysUpdate");
	case SOAP_TYPE_ns__HeartBeat:
		return soap_in_ns__HeartBeat(soap, NULL, NULL, "ns:HeartBeat");
	case SOAP_TYPE_ns__AbandonVideoRecord:
		return soap_in_ns__AbandonVideoRecord(soap, NULL, NULL, "ns:AbandonVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecord:
		return soap_in_ns__DownloadVideoRecord(soap, NULL, NULL, "ns:DownloadVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		return soap_in_ns__DownloadVideoRecordResponse(soap, NULL, NULL, "ns:DownloadVideoRecordResponse");
	case SOAP_TYPE_ns__PlayVideoRecord:
		return soap_in_ns__PlayVideoRecord(soap, NULL, NULL, "ns:PlayVideoRecord");
	case SOAP_TYPE_ns__QueryVideoUrl:
		return soap_in_ns__QueryVideoUrl(soap, NULL, NULL, "ns:QueryVideoUrl");
	case SOAP_TYPE_ns__QueryVideoUrlResponse:
		return soap_in_ns__QueryVideoUrlResponse(soap, NULL, NULL, "ns:QueryVideoUrlResponse");
	case SOAP_TYPE_ns__QueryVideoRecord:
		return soap_in_ns__QueryVideoRecord(soap, NULL, NULL, "ns:QueryVideoRecord");
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		return soap_in_ns__QueryVideoRecordResponse(soap, NULL, NULL, "ns:QueryVideoRecordResponse");
	case SOAP_TYPE_ns__AbandonCameraStream:
		return soap_in_ns__AbandonCameraStream(soap, NULL, NULL, "ns:AbandonCameraStream");
	case SOAP_TYPE_ns__PTZCtrlCamera:
		return soap_in_ns__PTZCtrlCamera(soap, NULL, NULL, "ns:PTZCtrlCamera");
	case SOAP_TYPE_ns__SwitchCameraToStream:
		return soap_in_ns__SwitchCameraToStream(soap, NULL, NULL, "ns:SwitchCameraToStream");
	case SOAP_TYPE_ns_HeartBeat:
		return soap_in_ns_HeartBeat(soap, NULL, NULL, "ns-HeartBeat");
	case SOAP_TYPE_ns__HBUSERINFO:
		return soap_in_ns__HBUSERINFO(soap, NULL, NULL, "ns:HBUSERINFO");
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		return soap_in_ns__HBNET_CAMREA_INFO(soap, NULL, NULL, "ns:HBNET-CAMREA-INFO");
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		return soap_in_ns__HBNET_RECOED_FILECOND(soap, NULL, NULL, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		return soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, NULL, NULL, "ns:HBNET-RECOED-PLAYCTRL");
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		return soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, NULL, NULL, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		return soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		return soap_in_ns__HBNET_VIDEO_STREAM(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE_ns__Response:
		return soap_in_ns__Response(soap, NULL, NULL, "ns:Response");
	case SOAP_TYPE_PointerTonsCXF__getDataCxfResponse:
		return soap_in_PointerTonsCXF__getDataCxfResponse(soap, NULL, NULL, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_PointerTonsCXF__getDataCxf:
		return soap_in_PointerTonsCXF__getDataCxf(soap, NULL, NULL, "nsCXF:getDataCxf");
	case SOAP_TYPE_PointerTo_ns1__getDataResponse:
		return soap_in_PointerTo_ns1__getDataResponse(soap, NULL, NULL, "ns1:getDataResponse");
	case SOAP_TYPE_PointerTo_ns1__getData:
		return soap_in_PointerTo_ns1__getData(soap, NULL, NULL, "ns1:getData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons__HBNET_RECOED_PLAYCTRL:
		return soap_in_PointerTons__HBNET_RECOED_PLAYCTRL(soap, NULL, NULL, "ns:HBNET-RECOED-PLAYCTRL");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP:
		return soap_in_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND:
		return soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, NULL, NULL, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_PointerTons__Response:
		return soap_in_PointerTons__Response(soap, NULL, NULL, "ns:Response");
	case SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL:
		return soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(soap, NULL, NULL, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM:
		return soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "nsCXF:getDataCxfResponse"))
		{	*type = SOAP_TYPE_nsCXF__getDataCxfResponse;
			return soap_in_nsCXF__getDataCxfResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "nsCXF:getDataCxf"))
		{	*type = SOAP_TYPE_nsCXF__getDataCxf;
			return soap_in_nsCXF__getDataCxf(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLong;
			return soap_in_unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CtrlVideoRecord"))
		{	*type = SOAP_TYPE_ns__CtrlVideoRecord;
			return soap_in_ns__CtrlVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AbandonVideoDownSIP"))
		{	*type = SOAP_TYPE_ns__AbandonVideoDownSIP;
			return soap_in_ns__AbandonVideoDownSIP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AbandonVideoRecordSIP"))
		{	*type = SOAP_TYPE_ns__AbandonVideoRecordSIP;
			return soap_in_ns__AbandonVideoRecordSIP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DownloadVideoRecordSIP"))
		{	*type = SOAP_TYPE_ns__DownloadVideoRecordSIP;
			return soap_in_ns__DownloadVideoRecordSIP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DownloadVideoRecordSIPResponse"))
		{	*type = SOAP_TYPE_ns__DownloadVideoRecordSIPResponse;
			return soap_in_ns__DownloadVideoRecordSIPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PlayVideoRecordSIP"))
		{	*type = SOAP_TYPE_ns__PlayVideoRecordSIP;
			return soap_in_ns__PlayVideoRecordSIP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PlayVideoRecordSIPResponse"))
		{	*type = SOAP_TYPE_ns__PlayVideoRecordSIPResponse;
			return soap_in_ns__PlayVideoRecordSIPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBOperate"))
		{	*type = SOAP_TYPE_ns__HBOperate;
			return soap_in_ns__HBOperate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBOperateResponse"))
		{	*type = SOAP_TYPE_ns__HBOperateResponse;
			return soap_in_ns__HBOperateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NetMaster"))
		{	*type = SOAP_TYPE_ns__NetMaster;
			return soap_in_ns__NetMaster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NetMasterResponse"))
		{	*type = SOAP_TYPE_ns__NetMasterResponse;
			return soap_in_ns__NetMasterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AutoSysUpdate"))
		{	*type = SOAP_TYPE_ns__AutoSysUpdate;
			return soap_in_ns__AutoSysUpdate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HeartBeat"))
		{	*type = SOAP_TYPE_ns__HeartBeat;
			return soap_in_ns__HeartBeat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AbandonVideoRecord"))
		{	*type = SOAP_TYPE_ns__AbandonVideoRecord;
			return soap_in_ns__AbandonVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DownloadVideoRecord"))
		{	*type = SOAP_TYPE_ns__DownloadVideoRecord;
			return soap_in_ns__DownloadVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DownloadVideoRecordResponse"))
		{	*type = SOAP_TYPE_ns__DownloadVideoRecordResponse;
			return soap_in_ns__DownloadVideoRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PlayVideoRecord"))
		{	*type = SOAP_TYPE_ns__PlayVideoRecord;
			return soap_in_ns__PlayVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryVideoUrl"))
		{	*type = SOAP_TYPE_ns__QueryVideoUrl;
			return soap_in_ns__QueryVideoUrl(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryVideoUrlResponse"))
		{	*type = SOAP_TYPE_ns__QueryVideoUrlResponse;
			return soap_in_ns__QueryVideoUrlResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryVideoRecord"))
		{	*type = SOAP_TYPE_ns__QueryVideoRecord;
			return soap_in_ns__QueryVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryVideoRecordResponse"))
		{	*type = SOAP_TYPE_ns__QueryVideoRecordResponse;
			return soap_in_ns__QueryVideoRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AbandonCameraStream"))
		{	*type = SOAP_TYPE_ns__AbandonCameraStream;
			return soap_in_ns__AbandonCameraStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PTZCtrlCamera"))
		{	*type = SOAP_TYPE_ns__PTZCtrlCamera;
			return soap_in_ns__PTZCtrlCamera(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SwitchCameraToStream"))
		{	*type = SOAP_TYPE_ns__SwitchCameraToStream;
			return soap_in_ns__SwitchCameraToStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns-HeartBeat"))
		{	*type = SOAP_TYPE_ns_HeartBeat;
			return soap_in_ns_HeartBeat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBUSERINFO"))
		{	*type = SOAP_TYPE_ns__HBUSERINFO;
			return soap_in_ns__HBUSERINFO(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-CAMREA-INFO"))
		{	*type = SOAP_TYPE_ns__HBNET_CAMREA_INFO;
			return soap_in_ns__HBNET_CAMREA_INFO(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-RECOED-FILECOND"))
		{	*type = SOAP_TYPE_ns__HBNET_RECOED_FILECOND;
			return soap_in_ns__HBNET_RECOED_FILECOND(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-RECOED-PLAYCTRL"))
		{	*type = SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL;
			return soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-CAMERA-PTZCTRL"))
		{	*type = SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL;
			return soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-VIDEO-STREAM-RESP"))
		{	*type = SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP;
			return soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-VIDEO-STREAM"))
		{	*type = SOAP_TYPE_ns__HBNET_VIDEO_STREAM;
			return soap_in_ns__HBNET_VIDEO_STREAM(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Response"))
		{	*type = SOAP_TYPE_ns__Response;
			return soap_in_ns__Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getDataResponse"))
		{	*type = SOAP_TYPE__ns1__getDataResponse;
			return soap_in__ns1__getDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getData"))
		{	*type = SOAP_TYPE__ns1__getData;
			return soap_in__ns1__getData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:schema"))
		{	char **s;
			*type = SOAP_TYPE__xsd__schema;
			s = soap_in__xsd__schema(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_out_unsignedLong(soap, tag, id, (const unsigned long *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		return ((nsCXF__getDataCxfResponse *)ptr)->soap_out(soap, tag, id, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_nsCXF__getDataCxf:
		return ((nsCXF__getDataCxf *)ptr)->soap_out(soap, tag, id, "nsCXF:getDataCxf");
	case SOAP_TYPE__ns1__getDataResponse:
		return ((_ns1__getDataResponse *)ptr)->soap_out(soap, "ns1:getDataResponse", id, NULL);
	case SOAP_TYPE__ns1__getData:
		return ((_ns1__getData *)ptr)->soap_out(soap, "ns1:getData", id, NULL);
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__CtrlVideoRecord:
		return soap_out_ns__CtrlVideoRecord(soap, tag, id, (const struct ns__CtrlVideoRecord *)ptr, "ns:CtrlVideoRecord");
	case SOAP_TYPE_ns__AbandonVideoDownSIP:
		return soap_out_ns__AbandonVideoDownSIP(soap, tag, id, (const struct ns__AbandonVideoDownSIP *)ptr, "ns:AbandonVideoDownSIP");
	case SOAP_TYPE_ns__AbandonVideoRecordSIP:
		return soap_out_ns__AbandonVideoRecordSIP(soap, tag, id, (const struct ns__AbandonVideoRecordSIP *)ptr, "ns:AbandonVideoRecordSIP");
	case SOAP_TYPE_ns__DownloadVideoRecordSIP:
		return soap_out_ns__DownloadVideoRecordSIP(soap, tag, id, (const struct ns__DownloadVideoRecordSIP *)ptr, "ns:DownloadVideoRecordSIP");
	case SOAP_TYPE_ns__DownloadVideoRecordSIPResponse:
		return soap_out_ns__DownloadVideoRecordSIPResponse(soap, tag, id, (const struct ns__DownloadVideoRecordSIPResponse *)ptr, "ns:DownloadVideoRecordSIPResponse");
	case SOAP_TYPE_ns__PlayVideoRecordSIP:
		return soap_out_ns__PlayVideoRecordSIP(soap, tag, id, (const struct ns__PlayVideoRecordSIP *)ptr, "ns:PlayVideoRecordSIP");
	case SOAP_TYPE_ns__PlayVideoRecordSIPResponse:
		return soap_out_ns__PlayVideoRecordSIPResponse(soap, tag, id, (const struct ns__PlayVideoRecordSIPResponse *)ptr, "ns:PlayVideoRecordSIPResponse");
	case SOAP_TYPE_ns__HBOperate:
		return soap_out_ns__HBOperate(soap, tag, id, (const struct ns__HBOperate *)ptr, "ns:HBOperate");
	case SOAP_TYPE_ns__HBOperateResponse:
		return soap_out_ns__HBOperateResponse(soap, tag, id, (const struct ns__HBOperateResponse *)ptr, "ns:HBOperateResponse");
	case SOAP_TYPE_ns__NetMaster:
		return soap_out_ns__NetMaster(soap, tag, id, (const struct ns__NetMaster *)ptr, "ns:NetMaster");
	case SOAP_TYPE_ns__NetMasterResponse:
		return soap_out_ns__NetMasterResponse(soap, tag, id, (const struct ns__NetMasterResponse *)ptr, "ns:NetMasterResponse");
	case SOAP_TYPE_ns__AutoSysUpdate:
		return soap_out_ns__AutoSysUpdate(soap, tag, id, (const struct ns__AutoSysUpdate *)ptr, "ns:AutoSysUpdate");
	case SOAP_TYPE_ns__HeartBeat:
		return soap_out_ns__HeartBeat(soap, tag, id, (const struct ns__HeartBeat *)ptr, "ns:HeartBeat");
	case SOAP_TYPE_ns__AbandonVideoRecord:
		return soap_out_ns__AbandonVideoRecord(soap, tag, id, (const struct ns__AbandonVideoRecord *)ptr, "ns:AbandonVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecord:
		return soap_out_ns__DownloadVideoRecord(soap, tag, id, (const struct ns__DownloadVideoRecord *)ptr, "ns:DownloadVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		return soap_out_ns__DownloadVideoRecordResponse(soap, tag, id, (const struct ns__DownloadVideoRecordResponse *)ptr, "ns:DownloadVideoRecordResponse");
	case SOAP_TYPE_ns__PlayVideoRecord:
		return soap_out_ns__PlayVideoRecord(soap, tag, id, (const struct ns__PlayVideoRecord *)ptr, "ns:PlayVideoRecord");
	case SOAP_TYPE_ns__QueryVideoUrl:
		return soap_out_ns__QueryVideoUrl(soap, tag, id, (const struct ns__QueryVideoUrl *)ptr, "ns:QueryVideoUrl");
	case SOAP_TYPE_ns__QueryVideoUrlResponse:
		return soap_out_ns__QueryVideoUrlResponse(soap, tag, id, (const struct ns__QueryVideoUrlResponse *)ptr, "ns:QueryVideoUrlResponse");
	case SOAP_TYPE_ns__QueryVideoRecord:
		return soap_out_ns__QueryVideoRecord(soap, tag, id, (const struct ns__QueryVideoRecord *)ptr, "ns:QueryVideoRecord");
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		return soap_out_ns__QueryVideoRecordResponse(soap, tag, id, (const struct ns__QueryVideoRecordResponse *)ptr, "ns:QueryVideoRecordResponse");
	case SOAP_TYPE_ns__AbandonCameraStream:
		return soap_out_ns__AbandonCameraStream(soap, tag, id, (const struct ns__AbandonCameraStream *)ptr, "ns:AbandonCameraStream");
	case SOAP_TYPE_ns__PTZCtrlCamera:
		return soap_out_ns__PTZCtrlCamera(soap, tag, id, (const struct ns__PTZCtrlCamera *)ptr, "ns:PTZCtrlCamera");
	case SOAP_TYPE_ns__SwitchCameraToStream:
		return soap_out_ns__SwitchCameraToStream(soap, tag, id, (const struct ns__SwitchCameraToStream *)ptr, "ns:SwitchCameraToStream");
	case SOAP_TYPE_ns_HeartBeat:
		return soap_out_ns_HeartBeat(soap, tag, id, (const struct ns_HeartBeat *)ptr, "ns-HeartBeat");
	case SOAP_TYPE_ns__HBUSERINFO:
		return soap_out_ns__HBUSERINFO(soap, tag, id, (const struct ns__HBUSERINFO *)ptr, "ns:HBUSERINFO");
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		return soap_out_ns__HBNET_CAMREA_INFO(soap, tag, id, (const struct ns__HBNET_CAMREA_INFO *)ptr, "ns:HBNET-CAMREA-INFO");
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		return soap_out_ns__HBNET_RECOED_FILECOND(soap, tag, id, (const struct ns__HBNET_RECOED_FILECOND *)ptr, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		return soap_out_ns__HBNET_RECOED_PLAYCTRL(soap, tag, id, (const struct ns__HBNET_RECOED_PLAYCTRL *)ptr, "ns:HBNET-RECOED-PLAYCTRL");
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		return soap_out_ns__HBNET_CAMERA_PTZCTRL(soap, tag, id, (const struct ns__HBNET_CAMERA_PTZCTRL *)ptr, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		return soap_out_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, id, (const struct ns__HBNET_VIDEO_STREAM_RESP *)ptr, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		return soap_out_ns__HBNET_VIDEO_STREAM(soap, tag, id, (const struct ns__HBNET_VIDEO_STREAM *)ptr, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE_ns__Response:
		return soap_out_ns__Response(soap, tag, id, (const struct ns__Response *)ptr, "ns:Response");
	case SOAP_TYPE_PointerTonsCXF__getDataCxfResponse:
		return soap_out_PointerTonsCXF__getDataCxfResponse(soap, tag, id, (nsCXF__getDataCxfResponse *const*)ptr, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_PointerTonsCXF__getDataCxf:
		return soap_out_PointerTonsCXF__getDataCxf(soap, tag, id, (nsCXF__getDataCxf *const*)ptr, "nsCXF:getDataCxf");
	case SOAP_TYPE_PointerTo_ns1__getDataResponse:
		return soap_out_PointerTo_ns1__getDataResponse(soap, tag, id, (_ns1__getDataResponse *const*)ptr, "ns1:getDataResponse");
	case SOAP_TYPE_PointerTo_ns1__getData:
		return soap_out_PointerTo_ns1__getData(soap, tag, id, (_ns1__getData *const*)ptr, "ns1:getData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons__HBNET_RECOED_PLAYCTRL:
		return soap_out_PointerTons__HBNET_RECOED_PLAYCTRL(soap, tag, id, (struct ns__HBNET_RECOED_PLAYCTRL *const*)ptr, "ns:HBNET-RECOED-PLAYCTRL");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP:
		return soap_out_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, tag, id, (struct ns__HBNET_VIDEO_STREAM_RESP *const*)ptr, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND:
		return soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, tag, id, (struct ns__HBNET_RECOED_FILECOND *const*)ptr, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_PointerTons__Response:
		return soap_out_PointerTons__Response(soap, tag, id, (struct ns__Response *const*)ptr, "ns:Response");
	case SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL:
		return soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(soap, tag, id, (struct ns__HBNET_CAMERA_PTZCTRL *const*)ptr, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM:
		return soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, tag, id, (struct ns__HBNET_VIDEO_STREAM *const*)ptr, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE__xsd__schema:
		return soap_out_string(soap, "xsd:schema", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		((nsCXF__getDataCxfResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_nsCXF__getDataCxf:
		((nsCXF__getDataCxf *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getDataResponse:
		((_ns1__getDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getData:
		((_ns1__getData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___nsCXF__getDataCxf:
		soap_serialize___nsCXF__getDataCxf(soap, (const struct __nsCXF__getDataCxf *)ptr);
		break;
	case SOAP_TYPE___ns1__getData:
		soap_serialize___ns1__getData(soap, (const struct __ns1__getData *)ptr);
		break;
	case SOAP_TYPE_ns__CtrlVideoRecord:
		soap_serialize_ns__CtrlVideoRecord(soap, (const struct ns__CtrlVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoDownSIP:
		soap_serialize_ns__AbandonVideoDownSIP(soap, (const struct ns__AbandonVideoDownSIP *)ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoRecordSIP:
		soap_serialize_ns__AbandonVideoRecordSIP(soap, (const struct ns__AbandonVideoRecordSIP *)ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordSIP:
		soap_serialize_ns__DownloadVideoRecordSIP(soap, (const struct ns__DownloadVideoRecordSIP *)ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordSIPResponse:
		soap_serialize_ns__DownloadVideoRecordSIPResponse(soap, (const struct ns__DownloadVideoRecordSIPResponse *)ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecordSIP:
		soap_serialize_ns__PlayVideoRecordSIP(soap, (const struct ns__PlayVideoRecordSIP *)ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecordSIPResponse:
		soap_serialize_ns__PlayVideoRecordSIPResponse(soap, (const struct ns__PlayVideoRecordSIPResponse *)ptr);
		break;
	case SOAP_TYPE_ns__HBOperate:
		soap_serialize_ns__HBOperate(soap, (const struct ns__HBOperate *)ptr);
		break;
	case SOAP_TYPE_ns__HBOperateResponse:
		soap_serialize_ns__HBOperateResponse(soap, (const struct ns__HBOperateResponse *)ptr);
		break;
	case SOAP_TYPE_ns__NetMaster:
		soap_serialize_ns__NetMaster(soap, (const struct ns__NetMaster *)ptr);
		break;
	case SOAP_TYPE_ns__NetMasterResponse:
		soap_serialize_ns__NetMasterResponse(soap, (const struct ns__NetMasterResponse *)ptr);
		break;
	case SOAP_TYPE_ns__AutoSysUpdate:
		soap_serialize_ns__AutoSysUpdate(soap, (const struct ns__AutoSysUpdate *)ptr);
		break;
	case SOAP_TYPE_ns__HeartBeat:
		soap_serialize_ns__HeartBeat(soap, (const struct ns__HeartBeat *)ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoRecord:
		soap_serialize_ns__AbandonVideoRecord(soap, (const struct ns__AbandonVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecord:
		soap_serialize_ns__DownloadVideoRecord(soap, (const struct ns__DownloadVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		soap_serialize_ns__DownloadVideoRecordResponse(soap, (const struct ns__DownloadVideoRecordResponse *)ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecord:
		soap_serialize_ns__PlayVideoRecord(soap, (const struct ns__PlayVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoUrl:
		soap_serialize_ns__QueryVideoUrl(soap, (const struct ns__QueryVideoUrl *)ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoUrlResponse:
		soap_serialize_ns__QueryVideoUrlResponse(soap, (const struct ns__QueryVideoUrlResponse *)ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoRecord:
		soap_serialize_ns__QueryVideoRecord(soap, (const struct ns__QueryVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		soap_serialize_ns__QueryVideoRecordResponse(soap, (const struct ns__QueryVideoRecordResponse *)ptr);
		break;
	case SOAP_TYPE_ns__AbandonCameraStream:
		soap_serialize_ns__AbandonCameraStream(soap, (const struct ns__AbandonCameraStream *)ptr);
		break;
	case SOAP_TYPE_ns__PTZCtrlCamera:
		soap_serialize_ns__PTZCtrlCamera(soap, (const struct ns__PTZCtrlCamera *)ptr);
		break;
	case SOAP_TYPE_ns__SwitchCameraToStream:
		soap_serialize_ns__SwitchCameraToStream(soap, (const struct ns__SwitchCameraToStream *)ptr);
		break;
	case SOAP_TYPE_ns_HeartBeat:
		soap_serialize_ns_HeartBeat(soap, (const struct ns_HeartBeat *)ptr);
		break;
	case SOAP_TYPE_ns__HBUSERINFO:
		soap_serialize_ns__HBUSERINFO(soap, (const struct ns__HBUSERINFO *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		soap_serialize_ns__HBNET_CAMREA_INFO(soap, (const struct ns__HBNET_CAMREA_INFO *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		soap_serialize_ns__HBNET_RECOED_FILECOND(soap, (const struct ns__HBNET_RECOED_FILECOND *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		soap_serialize_ns__HBNET_RECOED_PLAYCTRL(soap, (const struct ns__HBNET_RECOED_PLAYCTRL *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		soap_serialize_ns__HBNET_CAMERA_PTZCTRL(soap, (const struct ns__HBNET_CAMERA_PTZCTRL *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		soap_serialize_ns__HBNET_VIDEO_STREAM_RESP(soap, (const struct ns__HBNET_VIDEO_STREAM_RESP *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		soap_serialize_ns__HBNET_VIDEO_STREAM(soap, (const struct ns__HBNET_VIDEO_STREAM *)ptr);
		break;
	case SOAP_TYPE_ns__Response:
		soap_serialize_ns__Response(soap, (const struct ns__Response *)ptr);
		break;
	case SOAP_TYPE_PointerTonsCXF__getDataCxfResponse:
		soap_serialize_PointerTonsCXF__getDataCxfResponse(soap, (nsCXF__getDataCxfResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTonsCXF__getDataCxf:
		soap_serialize_PointerTonsCXF__getDataCxf(soap, (nsCXF__getDataCxf *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getDataResponse:
		soap_serialize_PointerTo_ns1__getDataResponse(soap, (_ns1__getDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getData:
		soap_serialize_PointerTo_ns1__getData(soap, (_ns1__getData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_RECOED_PLAYCTRL:
		soap_serialize_PointerTons__HBNET_RECOED_PLAYCTRL(soap, (struct ns__HBNET_RECOED_PLAYCTRL *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP:
		soap_serialize_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, (struct ns__HBNET_VIDEO_STREAM_RESP *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND:
		soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, (struct ns__HBNET_RECOED_FILECOND *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__Response:
		soap_serialize_PointerTons__Response(soap, (struct ns__Response *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL:
		soap_serialize_PointerTons__HBNET_CAMERA_PTZCTRL(soap, (struct ns__HBNET_CAMERA_PTZCTRL *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM:
		soap_serialize_PointerTons__HBNET_VIDEO_STREAM(soap, (struct ns__HBNET_VIDEO_STREAM *const*)ptr);
		break;
	case SOAP_TYPE__xsd__schema:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 Base_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Response:
		return (void*)soap_instantiate_ns__Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		return (void*)soap_instantiate_ns__HBNET_VIDEO_STREAM(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		return (void*)soap_instantiate_ns__HBNET_VIDEO_STREAM_RESP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		return (void*)soap_instantiate_ns__HBNET_CAMERA_PTZCTRL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		return (void*)soap_instantiate_ns__HBNET_RECOED_PLAYCTRL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		return (void*)soap_instantiate_ns__HBNET_RECOED_FILECOND(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		return (void*)soap_instantiate_ns__HBNET_CAMREA_INFO(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBUSERINFO:
		return (void*)soap_instantiate_ns__HBUSERINFO(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns_HeartBeat:
		return (void*)soap_instantiate_ns_HeartBeat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SwitchCameraToStream:
		return (void*)soap_instantiate_ns__SwitchCameraToStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PTZCtrlCamera:
		return (void*)soap_instantiate_ns__PTZCtrlCamera(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AbandonCameraStream:
		return (void*)soap_instantiate_ns__AbandonCameraStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		return (void*)soap_instantiate_ns__QueryVideoRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__QueryVideoRecord:
		return (void*)soap_instantiate_ns__QueryVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__QueryVideoUrlResponse:
		return (void*)soap_instantiate_ns__QueryVideoUrlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__QueryVideoUrl:
		return (void*)soap_instantiate_ns__QueryVideoUrl(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PlayVideoRecord:
		return (void*)soap_instantiate_ns__PlayVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		return (void*)soap_instantiate_ns__DownloadVideoRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DownloadVideoRecord:
		return (void*)soap_instantiate_ns__DownloadVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AbandonVideoRecord:
		return (void*)soap_instantiate_ns__AbandonVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HeartBeat:
		return (void*)soap_instantiate_ns__HeartBeat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AutoSysUpdate:
		return (void*)soap_instantiate_ns__AutoSysUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__NetMasterResponse:
		return (void*)soap_instantiate_ns__NetMasterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__NetMaster:
		return (void*)soap_instantiate_ns__NetMaster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBOperateResponse:
		return (void*)soap_instantiate_ns__HBOperateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBOperate:
		return (void*)soap_instantiate_ns__HBOperate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PlayVideoRecordSIPResponse:
		return (void*)soap_instantiate_ns__PlayVideoRecordSIPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PlayVideoRecordSIP:
		return (void*)soap_instantiate_ns__PlayVideoRecordSIP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DownloadVideoRecordSIPResponse:
		return (void*)soap_instantiate_ns__DownloadVideoRecordSIPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DownloadVideoRecordSIP:
		return (void*)soap_instantiate_ns__DownloadVideoRecordSIP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AbandonVideoRecordSIP:
		return (void*)soap_instantiate_ns__AbandonVideoRecordSIP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AbandonVideoDownSIP:
		return (void*)soap_instantiate_ns__AbandonVideoDownSIP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__CtrlVideoRecord:
		return (void*)soap_instantiate_ns__CtrlVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getData:
		return (void*)soap_instantiate__ns1__getData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getDataResponse:
		return (void*)soap_instantiate__ns1__getDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getData:
		return (void*)soap_instantiate___ns1__getData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_nsCXF__getDataCxf:
		return (void*)soap_instantiate_nsCXF__getDataCxf(soap, -1, type, arrayType, n);
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		return (void*)soap_instantiate_nsCXF__getDataCxfResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___nsCXF__getDataCxf:
		return (void*)soap_instantiate___nsCXF__getDataCxf(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 Base_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__Response:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Response*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBNET_VIDEO_STREAM*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBNET_VIDEO_STREAM*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBNET_VIDEO_STREAM_RESP*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBNET_VIDEO_STREAM_RESP*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBNET_CAMERA_PTZCTRL*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBNET_CAMERA_PTZCTRL*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBNET_RECOED_PLAYCTRL*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBNET_RECOED_PLAYCTRL*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBNET_RECOED_FILECOND*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBNET_RECOED_FILECOND*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBNET_CAMREA_INFO*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBNET_CAMREA_INFO*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBUSERINFO:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBUSERINFO*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBUSERINFO*)p->ptr);
		break;
	case SOAP_TYPE_ns_HeartBeat:
		if (p->size < 0)
			SOAP_DELETE((struct ns_HeartBeat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns_HeartBeat*)p->ptr);
		break;
	case SOAP_TYPE_ns__SwitchCameraToStream:
		if (p->size < 0)
			SOAP_DELETE((struct ns__SwitchCameraToStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__SwitchCameraToStream*)p->ptr);
		break;
	case SOAP_TYPE_ns__PTZCtrlCamera:
		if (p->size < 0)
			SOAP_DELETE((struct ns__PTZCtrlCamera*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__PTZCtrlCamera*)p->ptr);
		break;
	case SOAP_TYPE_ns__AbandonCameraStream:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AbandonCameraStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AbandonCameraStream*)p->ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryVideoRecordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryVideoRecordResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryVideoRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryVideoRecord*)p->ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoUrlResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryVideoUrlResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryVideoUrlResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoUrl:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryVideoUrl*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryVideoUrl*)p->ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__PlayVideoRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__PlayVideoRecord*)p->ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DownloadVideoRecordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DownloadVideoRecordResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DownloadVideoRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DownloadVideoRecord*)p->ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AbandonVideoRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AbandonVideoRecord*)p->ptr);
		break;
	case SOAP_TYPE_ns__HeartBeat:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HeartBeat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HeartBeat*)p->ptr);
		break;
	case SOAP_TYPE_ns__AutoSysUpdate:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AutoSysUpdate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AutoSysUpdate*)p->ptr);
		break;
	case SOAP_TYPE_ns__NetMasterResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__NetMasterResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__NetMasterResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__NetMaster:
		if (p->size < 0)
			SOAP_DELETE((struct ns__NetMaster*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__NetMaster*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBOperateResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBOperateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBOperateResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__HBOperate:
		if (p->size < 0)
			SOAP_DELETE((struct ns__HBOperate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__HBOperate*)p->ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecordSIPResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__PlayVideoRecordSIPResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__PlayVideoRecordSIPResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecordSIP:
		if (p->size < 0)
			SOAP_DELETE((struct ns__PlayVideoRecordSIP*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__PlayVideoRecordSIP*)p->ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordSIPResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DownloadVideoRecordSIPResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DownloadVideoRecordSIPResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordSIP:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DownloadVideoRecordSIP*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DownloadVideoRecordSIP*)p->ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoRecordSIP:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AbandonVideoRecordSIP*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AbandonVideoRecordSIP*)p->ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoDownSIP:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AbandonVideoDownSIP*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AbandonVideoDownSIP*)p->ptr);
		break;
	case SOAP_TYPE_ns__CtrlVideoRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__CtrlVideoRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__CtrlVideoRecord*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getDataResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getData*)p->ptr);
		break;
	case SOAP_TYPE_nsCXF__getDataCxf:
		if (p->size < 0)
			SOAP_DELETE((nsCXF__getDataCxf*)p->ptr);
		else
			SOAP_DELETE_ARRAY((nsCXF__getDataCxf*)p->ptr);
		break;
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		if (p->size < 0)
			SOAP_DELETE((nsCXF__getDataCxfResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((nsCXF__getDataCxfResponse*)p->ptr);
		break;
	case SOAP_TYPE___nsCXF__getDataCxf:
		if (p->size < 0)
			SOAP_DELETE((struct __nsCXF__getDataCxf*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __nsCXF__getDataCxf*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, Base_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, Base_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 Base_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLong(struct soap *soap, unsigned long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLong
	*a = SOAP_DEFAULT_unsignedLong;
#else
	*a = (unsigned long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLong(struct soap *soap, const char *tag, int id, const unsigned long *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedLong(soap, tag, id, a, type, SOAP_TYPE_unsignedLong);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_in_unsignedLong(struct soap *soap, const char *tag, unsigned long *a, const char *type)
{	unsigned long *p;
	p = soap_inunsignedLong(soap, tag, a, type, SOAP_TYPE_unsignedLong);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLong(struct soap *soap, const unsigned long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLong);
	if (soap_out_unsignedLong(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_get_unsignedLong(struct soap *soap, unsigned long *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void nsCXF__getDataCxfResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->nsCXF__getDataCxfResponse::return_ = NULL;
	/* transient soap skipped */
}

void nsCXF__getDataCxfResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxfResponse::return_);
	/* transient soap skipped */
}

int nsCXF__getDataCxfResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_nsCXF__getDataCxfResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_nsCXF__getDataCxfResponse(struct soap *soap, const char *tag, int id, const nsCXF__getDataCxfResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_nsCXF__getDataCxfResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->nsCXF__getDataCxfResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *nsCXF__getDataCxfResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_nsCXF__getDataCxfResponse(soap, tag, this, type);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse * SOAP_FMAC4 soap_in_nsCXF__getDataCxfResponse(struct soap *soap, const char *tag, nsCXF__getDataCxfResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (nsCXF__getDataCxfResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_nsCXF__getDataCxfResponse, sizeof(nsCXF__getDataCxfResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_nsCXF__getDataCxfResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (nsCXF__getDataCxfResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->nsCXF__getDataCxfResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (nsCXF__getDataCxfResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_nsCXF__getDataCxfResponse, 0, sizeof(nsCXF__getDataCxfResponse), 0, soap_copy_nsCXF__getDataCxfResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int nsCXF__getDataCxfResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_nsCXF__getDataCxfResponse);
	if (this->soap_out(soap, tag?tag:"nsCXF:getDataCxfResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *nsCXF__getDataCxfResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_nsCXF__getDataCxfResponse(soap, this, tag, type);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse * SOAP_FMAC4 soap_get_nsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_nsCXF__getDataCxfResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 nsCXF__getDataCxfResponse * SOAP_FMAC2 soap_instantiate_nsCXF__getDataCxfResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_nsCXF__getDataCxfResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_nsCXF__getDataCxfResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(nsCXF__getDataCxfResponse);
		if (size)
			*size = sizeof(nsCXF__getDataCxfResponse);
		((nsCXF__getDataCxfResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(nsCXF__getDataCxfResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(nsCXF__getDataCxfResponse);
		for (int i = 0; i < n; i++)
			((nsCXF__getDataCxfResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (nsCXF__getDataCxfResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_nsCXF__getDataCxfResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying nsCXF__getDataCxfResponse %p -> %p\n", q, p));
	*(nsCXF__getDataCxfResponse*)p = *(nsCXF__getDataCxfResponse*)q;
}

void nsCXF__getDataCxf::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->nsCXF__getDataCxf::arg0 = NULL;
	this->nsCXF__getDataCxf::arg1 = NULL;
	this->nsCXF__getDataCxf::arg2 = NULL;
	/* transient soap skipped */
}

void nsCXF__getDataCxf::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxf::arg0);
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxf::arg1);
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxf::arg2);
	/* transient soap skipped */
}

int nsCXF__getDataCxf::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_nsCXF__getDataCxf(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_nsCXF__getDataCxf(struct soap *soap, const char *tag, int id, const nsCXF__getDataCxf *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_nsCXF__getDataCxf), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->nsCXF__getDataCxf::arg0), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg1", -1, &(a->nsCXF__getDataCxf::arg1), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg2", -1, &(a->nsCXF__getDataCxf::arg2), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *nsCXF__getDataCxf::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_nsCXF__getDataCxf(soap, tag, this, type);
}

SOAP_FMAC3 nsCXF__getDataCxf * SOAP_FMAC4 soap_in_nsCXF__getDataCxf(struct soap *soap, const char *tag, nsCXF__getDataCxf *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (nsCXF__getDataCxf *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_nsCXF__getDataCxf, sizeof(nsCXF__getDataCxf), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_nsCXF__getDataCxf)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (nsCXF__getDataCxf *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	size_t soap_flag_arg21 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->nsCXF__getDataCxf::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg1", &(a->nsCXF__getDataCxf::arg1), "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			if (soap_flag_arg21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg2", &(a->nsCXF__getDataCxf::arg2), "xsd:string"))
				{	soap_flag_arg21--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (nsCXF__getDataCxf *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_nsCXF__getDataCxf, 0, sizeof(nsCXF__getDataCxf), 0, soap_copy_nsCXF__getDataCxf);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int nsCXF__getDataCxf::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_nsCXF__getDataCxf);
	if (this->soap_out(soap, tag?tag:"nsCXF:getDataCxf", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *nsCXF__getDataCxf::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_nsCXF__getDataCxf(soap, this, tag, type);
}

SOAP_FMAC3 nsCXF__getDataCxf * SOAP_FMAC4 soap_get_nsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf *p, const char *tag, const char *type)
{
	if ((p = soap_in_nsCXF__getDataCxf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 nsCXF__getDataCxf * SOAP_FMAC2 soap_instantiate_nsCXF__getDataCxf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_nsCXF__getDataCxf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_nsCXF__getDataCxf, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(nsCXF__getDataCxf);
		if (size)
			*size = sizeof(nsCXF__getDataCxf);
		((nsCXF__getDataCxf*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(nsCXF__getDataCxf[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(nsCXF__getDataCxf);
		for (int i = 0; i < n; i++)
			((nsCXF__getDataCxf*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (nsCXF__getDataCxf*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_nsCXF__getDataCxf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying nsCXF__getDataCxf %p -> %p\n", q, p));
	*(nsCXF__getDataCxf*)p = *(nsCXF__getDataCxf*)q;
}

void _ns1__getDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getDataResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__getDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getDataResponse::out);
	/* transient soap skipped */
}

int _ns1__getDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getDataResponse(struct soap *soap, const char *tag, int id, const _ns1__getDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getDataResponse), type))
		return soap->error;
	if (a->out)
		soap_element_result(soap, "ns1:out");
	if (a->_ns1__getDataResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "ns1:out", -1, &a->_ns1__getDataResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getDataResponse * SOAP_FMAC4 soap_in__ns1__getDataResponse(struct soap *soap, const char *tag, _ns1__getDataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getDataResponse, sizeof(_ns1__getDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:out", &(a->_ns1__getDataResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:out");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getDataResponse, 0, sizeof(_ns1__getDataResponse), 0, soap_copy__ns1__getDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getDataResponse * SOAP_FMAC4 soap_get__ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getDataResponse * SOAP_FMAC2 soap_instantiate__ns1__getDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getDataResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getDataResponse);
		if (size)
			*size = sizeof(_ns1__getDataResponse);
		((_ns1__getDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getDataResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getDataResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getDataResponse %p -> %p\n", q, p));
	*(_ns1__getDataResponse*)p = *(_ns1__getDataResponse*)q;
}

void _ns1__getData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getData::in0 = NULL;
	this->_ns1__getData::in1 = NULL;
	this->_ns1__getData::in2 = NULL;
	/* transient soap skipped */
}

void _ns1__getData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getData::in0);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getData::in1);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getData::in2);
	/* transient soap skipped */
}

int _ns1__getData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getData(struct soap *soap, const char *tag, int id, const _ns1__getData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getData), type))
		return soap->error;
	if (a->_ns1__getData::in0)
	{	if (soap_out_PointerTostd__string(soap, "ns1:in0", -1, &a->_ns1__getData::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:in0"))
		return soap->error;
	if (a->_ns1__getData::in1)
	{	if (soap_out_PointerTostd__string(soap, "ns1:in1", -1, &a->_ns1__getData::in1, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:in1"))
		return soap->error;
	if (a->_ns1__getData::in2)
	{	if (soap_out_PointerTostd__string(soap, "ns1:in2", -1, &a->_ns1__getData::in2, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:in2"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getData * SOAP_FMAC4 soap_in__ns1__getData(struct soap *soap, const char *tag, _ns1__getData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getData, sizeof(_ns1__getData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	size_t soap_flag_in11 = 1;
	size_t soap_flag_in21 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:in0", &(a->_ns1__getData::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			if (soap_flag_in11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:in1", &(a->_ns1__getData::in1), "xsd:string"))
				{	soap_flag_in11--;
					continue;
				}
			if (soap_flag_in21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:in2", &(a->_ns1__getData::in2), "xsd:string"))
				{	soap_flag_in21--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getData, 0, sizeof(_ns1__getData), 0, soap_copy__ns1__getData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0 || soap_flag_in11 > 0 || soap_flag_in21 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getData);
	if (this->soap_out(soap, tag?tag:"ns1:getData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getData * SOAP_FMAC4 soap_get__ns1__getData(struct soap *soap, _ns1__getData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getData * SOAP_FMAC2 soap_instantiate__ns1__getData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getData, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getData);
		if (size)
			*size = sizeof(_ns1__getData);
		((_ns1__getData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getData);
		for (int i = 0; i < n; i++)
			((_ns1__getData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getData %p -> %p\n", q, p));
	*(_ns1__getData*)p = *(_ns1__getData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___nsCXF__getDataCxf(struct soap *soap, struct __nsCXF__getDataCxf *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->nsCXF__getDataCxf_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___nsCXF__getDataCxf(struct soap *soap, const struct __nsCXF__getDataCxf *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTonsCXF__getDataCxf(soap, &a->nsCXF__getDataCxf_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___nsCXF__getDataCxf(struct soap *soap, const char *tag, int id, const struct __nsCXF__getDataCxf *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTonsCXF__getDataCxf(soap, "nsCXF:getDataCxf", -1, &a->nsCXF__getDataCxf_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __nsCXF__getDataCxf * SOAP_FMAC4 soap_in___nsCXF__getDataCxf(struct soap *soap, const char *tag, struct __nsCXF__getDataCxf *a, const char *type)
{
	size_t soap_flag_nsCXF__getDataCxf_ = 1;
	short soap_flag;
	a = (struct __nsCXF__getDataCxf *)soap_id_enter(soap, "", a, SOAP_TYPE___nsCXF__getDataCxf, sizeof(struct __nsCXF__getDataCxf), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___nsCXF__getDataCxf(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsCXF__getDataCxf_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTonsCXF__getDataCxf(soap, "nsCXF:getDataCxf", &a->nsCXF__getDataCxf_, "nsCXF:getDataCxf"))
				{	soap_flag_nsCXF__getDataCxf_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___nsCXF__getDataCxf(struct soap *soap, const struct __nsCXF__getDataCxf *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___nsCXF__getDataCxf(soap, tag?tag:"-nsCXF:getDataCxf", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __nsCXF__getDataCxf * SOAP_FMAC4 soap_get___nsCXF__getDataCxf(struct soap *soap, struct __nsCXF__getDataCxf *p, const char *tag, const char *type)
{
	if ((p = soap_in___nsCXF__getDataCxf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __nsCXF__getDataCxf * SOAP_FMAC2 soap_instantiate___nsCXF__getDataCxf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___nsCXF__getDataCxf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___nsCXF__getDataCxf, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __nsCXF__getDataCxf);
		if (size)
			*size = sizeof(struct __nsCXF__getDataCxf);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __nsCXF__getDataCxf[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __nsCXF__getDataCxf);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __nsCXF__getDataCxf*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___nsCXF__getDataCxf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __nsCXF__getDataCxf %p -> %p\n", q, p));
	*(struct __nsCXF__getDataCxf*)p = *(struct __nsCXF__getDataCxf*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getData(struct soap *soap, struct __ns1__getData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getData(struct soap *soap, const struct __ns1__getData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getData(soap, &a->ns1__getData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getData(struct soap *soap, const char *tag, int id, const struct __ns1__getData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getData(soap, "ns1:getData", -1, &a->ns1__getData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getData * SOAP_FMAC4 soap_in___ns1__getData(struct soap *soap, const char *tag, struct __ns1__getData *a, const char *type)
{
	size_t soap_flag_ns1__getData = 1;
	short soap_flag;
	a = (struct __ns1__getData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getData, sizeof(struct __ns1__getData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getData(soap, "ns1:getData", &a->ns1__getData, ""))
				{	soap_flag_ns1__getData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getData(struct soap *soap, const struct __ns1__getData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getData(soap, tag?tag:"-ns1:getData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getData * SOAP_FMAC4 soap_get___ns1__getData(struct soap *soap, struct __ns1__getData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getData * SOAP_FMAC2 soap_instantiate___ns1__getData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getData, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getData);
		if (size)
			*size = sizeof(struct __ns1__getData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getData %p -> %p\n", q, p));
	*(struct __ns1__getData*)p = *(struct __ns1__getData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CtrlVideoRecord(struct soap *soap, struct ns__CtrlVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Pctrl = NULL;
	soap_default_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CtrlVideoRecord(struct soap *soap, const struct ns__CtrlVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_RECOED_PLAYCTRL(soap, &a->Pctrl);
	soap_embedded(soap, &a->strCallID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CtrlVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__CtrlVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CtrlVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_RECOED_PLAYCTRL(soap, "Pctrl", -1, &a->Pctrl, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strCallID", -1, &a->strCallID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__CtrlVideoRecord * SOAP_FMAC4 soap_in_ns__CtrlVideoRecord(struct soap *soap, const char *tag, struct ns__CtrlVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Pctrl = 1;
	size_t soap_flag_strCallID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__CtrlVideoRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CtrlVideoRecord, sizeof(struct ns__CtrlVideoRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__CtrlVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Pctrl && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_RECOED_PLAYCTRL(soap, "Pctrl", &a->Pctrl, "ns:HBNET-RECOED-PLAYCTRL"))
				{	soap_flag_Pctrl--;
					continue;
				}
			if (soap_flag_strCallID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCallID", &a->strCallID, "xsd:string"))
				{	soap_flag_strCallID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__CtrlVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CtrlVideoRecord, 0, sizeof(struct ns__CtrlVideoRecord), 0, soap_copy_ns__CtrlVideoRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0 || soap_flag_strCallID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CtrlVideoRecord(struct soap *soap, const struct ns__CtrlVideoRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__CtrlVideoRecord);
	if (soap_out_ns__CtrlVideoRecord(soap, tag?tag:"ns:CtrlVideoRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CtrlVideoRecord * SOAP_FMAC4 soap_get_ns__CtrlVideoRecord(struct soap *soap, struct ns__CtrlVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CtrlVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__CtrlVideoRecord * SOAP_FMAC2 soap_instantiate_ns__CtrlVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CtrlVideoRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__CtrlVideoRecord, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__CtrlVideoRecord);
		if (size)
			*size = sizeof(struct ns__CtrlVideoRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__CtrlVideoRecord[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__CtrlVideoRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__CtrlVideoRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__CtrlVideoRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__CtrlVideoRecord %p -> %p\n", q, p));
	*(struct ns__CtrlVideoRecord*)p = *(struct ns__CtrlVideoRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AbandonVideoDownSIP(struct soap *soap, struct ns__AbandonVideoDownSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	soap_default_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AbandonVideoDownSIP(struct soap *soap, const struct ns__AbandonVideoDownSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_embedded(soap, &a->strCallID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AbandonVideoDownSIP(struct soap *soap, const char *tag, int id, const struct ns__AbandonVideoDownSIP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AbandonVideoDownSIP), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strCallID", -1, &a->strCallID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AbandonVideoDownSIP * SOAP_FMAC4 soap_in_ns__AbandonVideoDownSIP(struct soap *soap, const char *tag, struct ns__AbandonVideoDownSIP *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_strCallID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AbandonVideoDownSIP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AbandonVideoDownSIP, sizeof(struct ns__AbandonVideoDownSIP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__AbandonVideoDownSIP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_strCallID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCallID", &a->strCallID, "xsd:string"))
				{	soap_flag_strCallID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AbandonVideoDownSIP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AbandonVideoDownSIP, 0, sizeof(struct ns__AbandonVideoDownSIP), 0, soap_copy_ns__AbandonVideoDownSIP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0 || soap_flag_strCallID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AbandonVideoDownSIP(struct soap *soap, const struct ns__AbandonVideoDownSIP *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AbandonVideoDownSIP);
	if (soap_out_ns__AbandonVideoDownSIP(soap, tag?tag:"ns:AbandonVideoDownSIP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AbandonVideoDownSIP * SOAP_FMAC4 soap_get_ns__AbandonVideoDownSIP(struct soap *soap, struct ns__AbandonVideoDownSIP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AbandonVideoDownSIP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AbandonVideoDownSIP * SOAP_FMAC2 soap_instantiate_ns__AbandonVideoDownSIP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AbandonVideoDownSIP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AbandonVideoDownSIP, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonVideoDownSIP);
		if (size)
			*size = sizeof(struct ns__AbandonVideoDownSIP);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonVideoDownSIP[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AbandonVideoDownSIP);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AbandonVideoDownSIP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AbandonVideoDownSIP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AbandonVideoDownSIP %p -> %p\n", q, p));
	*(struct ns__AbandonVideoDownSIP*)p = *(struct ns__AbandonVideoDownSIP*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AbandonVideoRecordSIP(struct soap *soap, struct ns__AbandonVideoRecordSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	soap_default_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AbandonVideoRecordSIP(struct soap *soap, const struct ns__AbandonVideoRecordSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_embedded(soap, &a->strCallID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AbandonVideoRecordSIP(struct soap *soap, const char *tag, int id, const struct ns__AbandonVideoRecordSIP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AbandonVideoRecordSIP), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strCallID", -1, &a->strCallID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AbandonVideoRecordSIP * SOAP_FMAC4 soap_in_ns__AbandonVideoRecordSIP(struct soap *soap, const char *tag, struct ns__AbandonVideoRecordSIP *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_strCallID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AbandonVideoRecordSIP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AbandonVideoRecordSIP, sizeof(struct ns__AbandonVideoRecordSIP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__AbandonVideoRecordSIP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_strCallID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCallID", &a->strCallID, "xsd:string"))
				{	soap_flag_strCallID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AbandonVideoRecordSIP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AbandonVideoRecordSIP, 0, sizeof(struct ns__AbandonVideoRecordSIP), 0, soap_copy_ns__AbandonVideoRecordSIP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0 || soap_flag_strCallID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AbandonVideoRecordSIP(struct soap *soap, const struct ns__AbandonVideoRecordSIP *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AbandonVideoRecordSIP);
	if (soap_out_ns__AbandonVideoRecordSIP(soap, tag?tag:"ns:AbandonVideoRecordSIP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AbandonVideoRecordSIP * SOAP_FMAC4 soap_get_ns__AbandonVideoRecordSIP(struct soap *soap, struct ns__AbandonVideoRecordSIP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AbandonVideoRecordSIP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AbandonVideoRecordSIP * SOAP_FMAC2 soap_instantiate_ns__AbandonVideoRecordSIP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AbandonVideoRecordSIP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AbandonVideoRecordSIP, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonVideoRecordSIP);
		if (size)
			*size = sizeof(struct ns__AbandonVideoRecordSIP);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonVideoRecordSIP[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AbandonVideoRecordSIP);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AbandonVideoRecordSIP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AbandonVideoRecordSIP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AbandonVideoRecordSIP %p -> %p\n", q, p));
	*(struct ns__AbandonVideoRecordSIP*)p = *(struct ns__AbandonVideoRecordSIP*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DownloadVideoRecordSIP(struct soap *soap, struct ns__DownloadVideoRecordSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Param = NULL;
	a->Url = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DownloadVideoRecordSIP(struct soap *soap, const struct ns__DownloadVideoRecordSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, &a->Param);
	soap_serialize_PointerTons__HBNET_VIDEO_STREAM(soap, &a->Url);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DownloadVideoRecordSIP(struct soap *soap, const char *tag, int id, const struct ns__DownloadVideoRecordSIP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DownloadVideoRecordSIP), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", -1, &a->Param, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, "Url", -1, &a->Url, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordSIP * SOAP_FMAC4 soap_in_ns__DownloadVideoRecordSIP(struct soap *soap, const char *tag, struct ns__DownloadVideoRecordSIP *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Param = 1;
	size_t soap_flag_Url = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DownloadVideoRecordSIP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DownloadVideoRecordSIP, sizeof(struct ns__DownloadVideoRecordSIP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__DownloadVideoRecordSIP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", &a->Param, "ns:HBNET-RECOED-FILECOND"))
				{	soap_flag_Param--;
					continue;
				}
			if (soap_flag_Url && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, "Url", &a->Url, "ns:HBNET-VIDEO-STREAM"))
				{	soap_flag_Url--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DownloadVideoRecordSIP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DownloadVideoRecordSIP, 0, sizeof(struct ns__DownloadVideoRecordSIP), 0, soap_copy_ns__DownloadVideoRecordSIP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DownloadVideoRecordSIP(struct soap *soap, const struct ns__DownloadVideoRecordSIP *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DownloadVideoRecordSIP);
	if (soap_out_ns__DownloadVideoRecordSIP(soap, tag?tag:"ns:DownloadVideoRecordSIP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordSIP * SOAP_FMAC4 soap_get_ns__DownloadVideoRecordSIP(struct soap *soap, struct ns__DownloadVideoRecordSIP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DownloadVideoRecordSIP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DownloadVideoRecordSIP * SOAP_FMAC2 soap_instantiate_ns__DownloadVideoRecordSIP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DownloadVideoRecordSIP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DownloadVideoRecordSIP, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecordSIP);
		if (size)
			*size = sizeof(struct ns__DownloadVideoRecordSIP);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecordSIP[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__DownloadVideoRecordSIP);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__DownloadVideoRecordSIP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DownloadVideoRecordSIP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DownloadVideoRecordSIP %p -> %p\n", q, p));
	*(struct ns__DownloadVideoRecordSIP*)p = *(struct ns__DownloadVideoRecordSIP*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DownloadVideoRecordSIPResponse(struct soap *soap, struct ns__DownloadVideoRecordSIPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DownloadVideoRecordSIPResponse(struct soap *soap, const struct ns__DownloadVideoRecordSIPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strCallID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DownloadVideoRecordSIPResponse(struct soap *soap, const char *tag, int id, const struct ns__DownloadVideoRecordSIPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DownloadVideoRecordSIPResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "strCallID", -1, &a->strCallID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordSIPResponse * SOAP_FMAC4 soap_in_ns__DownloadVideoRecordSIPResponse(struct soap *soap, const char *tag, struct ns__DownloadVideoRecordSIPResponse *a, const char *type)
{
	size_t soap_flag_strCallID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DownloadVideoRecordSIPResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DownloadVideoRecordSIPResponse, sizeof(struct ns__DownloadVideoRecordSIPResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__DownloadVideoRecordSIPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCallID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCallID", &a->strCallID, "xsd:string"))
				{	soap_flag_strCallID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DownloadVideoRecordSIPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DownloadVideoRecordSIPResponse, 0, sizeof(struct ns__DownloadVideoRecordSIPResponse), 0, soap_copy_ns__DownloadVideoRecordSIPResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strCallID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DownloadVideoRecordSIPResponse(struct soap *soap, const struct ns__DownloadVideoRecordSIPResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DownloadVideoRecordSIPResponse);
	if (soap_out_ns__DownloadVideoRecordSIPResponse(soap, tag?tag:"ns:DownloadVideoRecordSIPResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordSIPResponse * SOAP_FMAC4 soap_get_ns__DownloadVideoRecordSIPResponse(struct soap *soap, struct ns__DownloadVideoRecordSIPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DownloadVideoRecordSIPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DownloadVideoRecordSIPResponse * SOAP_FMAC2 soap_instantiate_ns__DownloadVideoRecordSIPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DownloadVideoRecordSIPResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DownloadVideoRecordSIPResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecordSIPResponse);
		if (size)
			*size = sizeof(struct ns__DownloadVideoRecordSIPResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecordSIPResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__DownloadVideoRecordSIPResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__DownloadVideoRecordSIPResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DownloadVideoRecordSIPResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DownloadVideoRecordSIPResponse %p -> %p\n", q, p));
	*(struct ns__DownloadVideoRecordSIPResponse*)p = *(struct ns__DownloadVideoRecordSIPResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PlayVideoRecordSIP(struct soap *soap, struct ns__PlayVideoRecordSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Param = NULL;
	a->Url = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PlayVideoRecordSIP(struct soap *soap, const struct ns__PlayVideoRecordSIP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, &a->Param);
	soap_serialize_PointerTons__HBNET_VIDEO_STREAM(soap, &a->Url);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PlayVideoRecordSIP(struct soap *soap, const char *tag, int id, const struct ns__PlayVideoRecordSIP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PlayVideoRecordSIP), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", -1, &a->Param, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, "Url", -1, &a->Url, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PlayVideoRecordSIP * SOAP_FMAC4 soap_in_ns__PlayVideoRecordSIP(struct soap *soap, const char *tag, struct ns__PlayVideoRecordSIP *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Param = 1;
	size_t soap_flag_Url = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PlayVideoRecordSIP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PlayVideoRecordSIP, sizeof(struct ns__PlayVideoRecordSIP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__PlayVideoRecordSIP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", &a->Param, "ns:HBNET-RECOED-FILECOND"))
				{	soap_flag_Param--;
					continue;
				}
			if (soap_flag_Url && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, "Url", &a->Url, "ns:HBNET-VIDEO-STREAM"))
				{	soap_flag_Url--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__PlayVideoRecordSIP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PlayVideoRecordSIP, 0, sizeof(struct ns__PlayVideoRecordSIP), 0, soap_copy_ns__PlayVideoRecordSIP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PlayVideoRecordSIP(struct soap *soap, const struct ns__PlayVideoRecordSIP *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__PlayVideoRecordSIP);
	if (soap_out_ns__PlayVideoRecordSIP(soap, tag?tag:"ns:PlayVideoRecordSIP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PlayVideoRecordSIP * SOAP_FMAC4 soap_get_ns__PlayVideoRecordSIP(struct soap *soap, struct ns__PlayVideoRecordSIP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PlayVideoRecordSIP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__PlayVideoRecordSIP * SOAP_FMAC2 soap_instantiate_ns__PlayVideoRecordSIP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PlayVideoRecordSIP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__PlayVideoRecordSIP, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PlayVideoRecordSIP);
		if (size)
			*size = sizeof(struct ns__PlayVideoRecordSIP);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PlayVideoRecordSIP[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__PlayVideoRecordSIP);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__PlayVideoRecordSIP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__PlayVideoRecordSIP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__PlayVideoRecordSIP %p -> %p\n", q, p));
	*(struct ns__PlayVideoRecordSIP*)p = *(struct ns__PlayVideoRecordSIP*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PlayVideoRecordSIPResponse(struct soap *soap, struct ns__PlayVideoRecordSIPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PlayVideoRecordSIPResponse(struct soap *soap, const struct ns__PlayVideoRecordSIPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strCallID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCallID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PlayVideoRecordSIPResponse(struct soap *soap, const char *tag, int id, const struct ns__PlayVideoRecordSIPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PlayVideoRecordSIPResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "strCallID", -1, &a->strCallID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PlayVideoRecordSIPResponse * SOAP_FMAC4 soap_in_ns__PlayVideoRecordSIPResponse(struct soap *soap, const char *tag, struct ns__PlayVideoRecordSIPResponse *a, const char *type)
{
	size_t soap_flag_strCallID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PlayVideoRecordSIPResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PlayVideoRecordSIPResponse, sizeof(struct ns__PlayVideoRecordSIPResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__PlayVideoRecordSIPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strCallID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCallID", &a->strCallID, "xsd:string"))
				{	soap_flag_strCallID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__PlayVideoRecordSIPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PlayVideoRecordSIPResponse, 0, sizeof(struct ns__PlayVideoRecordSIPResponse), 0, soap_copy_ns__PlayVideoRecordSIPResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strCallID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PlayVideoRecordSIPResponse(struct soap *soap, const struct ns__PlayVideoRecordSIPResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__PlayVideoRecordSIPResponse);
	if (soap_out_ns__PlayVideoRecordSIPResponse(soap, tag?tag:"ns:PlayVideoRecordSIPResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PlayVideoRecordSIPResponse * SOAP_FMAC4 soap_get_ns__PlayVideoRecordSIPResponse(struct soap *soap, struct ns__PlayVideoRecordSIPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PlayVideoRecordSIPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__PlayVideoRecordSIPResponse * SOAP_FMAC2 soap_instantiate_ns__PlayVideoRecordSIPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PlayVideoRecordSIPResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__PlayVideoRecordSIPResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PlayVideoRecordSIPResponse);
		if (size)
			*size = sizeof(struct ns__PlayVideoRecordSIPResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PlayVideoRecordSIPResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__PlayVideoRecordSIPResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__PlayVideoRecordSIPResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__PlayVideoRecordSIPResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__PlayVideoRecordSIPResponse %p -> %p\n", q, p));
	*(struct ns__PlayVideoRecordSIPResponse*)p = *(struct ns__PlayVideoRecordSIPResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBOperate(struct soap *soap, struct ns__HBOperate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->szXml);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBOperate(struct soap *soap, const struct ns__HBOperate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->szXml);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBOperate(struct soap *soap, const char *tag, int id, const struct ns__HBOperate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBOperate), type))
		return soap->error;
	if (soap_out_string(soap, "szXml", -1, &a->szXml, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBOperate * SOAP_FMAC4 soap_in_ns__HBOperate(struct soap *soap, const char *tag, struct ns__HBOperate *a, const char *type)
{
	size_t soap_flag_szXml = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBOperate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBOperate, sizeof(struct ns__HBOperate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBOperate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_szXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szXml", &a->szXml, "xsd:string"))
				{	soap_flag_szXml--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBOperate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBOperate, 0, sizeof(struct ns__HBOperate), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBOperate(struct soap *soap, const struct ns__HBOperate *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBOperate);
	if (soap_out_ns__HBOperate(soap, tag?tag:"ns:HBOperate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBOperate * SOAP_FMAC4 soap_get_ns__HBOperate(struct soap *soap, struct ns__HBOperate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBOperate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBOperate * SOAP_FMAC2 soap_instantiate_ns__HBOperate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBOperate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBOperate, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBOperate);
		if (size)
			*size = sizeof(struct ns__HBOperate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBOperate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBOperate);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBOperate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBOperate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBOperate %p -> %p\n", q, p));
	*(struct ns__HBOperate*)p = *(struct ns__HBOperate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBOperateResponse(struct soap *soap, struct ns__HBOperateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->szXmlRes);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBOperateResponse(struct soap *soap, const struct ns__HBOperateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->szXmlRes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBOperateResponse(struct soap *soap, const char *tag, int id, const struct ns__HBOperateResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBOperateResponse), type))
		return soap->error;
	if (a->szXmlRes)
	{	if (soap_out_string(soap, "szXmlRes", -1, &a->szXmlRes, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "szXmlRes"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBOperateResponse * SOAP_FMAC4 soap_in_ns__HBOperateResponse(struct soap *soap, const char *tag, struct ns__HBOperateResponse *a, const char *type)
{
	size_t soap_flag_szXmlRes = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBOperateResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBOperateResponse, sizeof(struct ns__HBOperateResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBOperateResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_szXmlRes && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szXmlRes", &a->szXmlRes, "xsd:string"))
				{	soap_flag_szXmlRes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBOperateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBOperateResponse, 0, sizeof(struct ns__HBOperateResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_szXmlRes > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBOperateResponse(struct soap *soap, const struct ns__HBOperateResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBOperateResponse);
	if (soap_out_ns__HBOperateResponse(soap, tag?tag:"ns:HBOperateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBOperateResponse * SOAP_FMAC4 soap_get_ns__HBOperateResponse(struct soap *soap, struct ns__HBOperateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBOperateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBOperateResponse * SOAP_FMAC2 soap_instantiate_ns__HBOperateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBOperateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBOperateResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBOperateResponse);
		if (size)
			*size = sizeof(struct ns__HBOperateResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBOperateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBOperateResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBOperateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBOperateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBOperateResponse %p -> %p\n", q, p));
	*(struct ns__HBOperateResponse*)p = *(struct ns__HBOperateResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NetMaster(struct soap *soap, struct ns__NetMaster *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nIsOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NetMaster(struct soap *soap, const struct ns__NetMaster *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NetMaster(struct soap *soap, const char *tag, int id, const struct ns__NetMaster *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NetMaster), type))
		return soap->error;
	if (soap_out_int(soap, "nIsOK", -1, &a->nIsOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__NetMaster * SOAP_FMAC4 soap_in_ns__NetMaster(struct soap *soap, const char *tag, struct ns__NetMaster *a, const char *type)
{
	size_t soap_flag_nIsOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__NetMaster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NetMaster, sizeof(struct ns__NetMaster), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NetMaster(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIsOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nIsOK", &a->nIsOK, "xsd:int"))
				{	soap_flag_nIsOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__NetMaster *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__NetMaster, 0, sizeof(struct ns__NetMaster), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIsOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NetMaster(struct soap *soap, const struct ns__NetMaster *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__NetMaster);
	if (soap_out_ns__NetMaster(soap, tag?tag:"ns:NetMaster", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__NetMaster * SOAP_FMAC4 soap_get_ns__NetMaster(struct soap *soap, struct ns__NetMaster *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NetMaster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__NetMaster * SOAP_FMAC2 soap_instantiate_ns__NetMaster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__NetMaster(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__NetMaster, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NetMaster);
		if (size)
			*size = sizeof(struct ns__NetMaster);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NetMaster[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__NetMaster);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__NetMaster*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__NetMaster(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__NetMaster %p -> %p\n", q, p));
	*(struct ns__NetMaster*)p = *(struct ns__NetMaster*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NetMasterResponse(struct soap *soap, struct ns__NetMasterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NetMasterResponse(struct soap *soap, const struct ns__NetMasterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NetMasterResponse(struct soap *soap, const char *tag, int id, const struct ns__NetMasterResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NetMasterResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &a->nResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__NetMasterResponse * SOAP_FMAC4 soap_in_ns__NetMasterResponse(struct soap *soap, const char *tag, struct ns__NetMasterResponse *a, const char *type)
{
	size_t soap_flag_nResult = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__NetMasterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NetMasterResponse, sizeof(struct ns__NetMasterResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NetMasterResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &a->nResult, "xsd:int"))
				{	soap_flag_nResult--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__NetMasterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__NetMasterResponse, 0, sizeof(struct ns__NetMasterResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NetMasterResponse(struct soap *soap, const struct ns__NetMasterResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__NetMasterResponse);
	if (soap_out_ns__NetMasterResponse(soap, tag?tag:"ns:NetMasterResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__NetMasterResponse * SOAP_FMAC4 soap_get_ns__NetMasterResponse(struct soap *soap, struct ns__NetMasterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NetMasterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__NetMasterResponse * SOAP_FMAC2 soap_instantiate_ns__NetMasterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__NetMasterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__NetMasterResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NetMasterResponse);
		if (size)
			*size = sizeof(struct ns__NetMasterResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NetMasterResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__NetMasterResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__NetMasterResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__NetMasterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__NetMasterResponse %p -> %p\n", q, p));
	*(struct ns__NetMasterResponse*)p = *(struct ns__NetMasterResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AutoSysUpdate(struct soap *soap, struct ns__AutoSysUpdate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strXmlFile);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AutoSysUpdate(struct soap *soap, const struct ns__AutoSysUpdate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strXmlFile, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strXmlFile);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AutoSysUpdate(struct soap *soap, const char *tag, int id, const struct ns__AutoSysUpdate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AutoSysUpdate), type))
		return soap->error;
	if (soap_out_std__string(soap, "strXmlFile", -1, &a->strXmlFile, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AutoSysUpdate * SOAP_FMAC4 soap_in_ns__AutoSysUpdate(struct soap *soap, const char *tag, struct ns__AutoSysUpdate *a, const char *type)
{
	size_t soap_flag_strXmlFile = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AutoSysUpdate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AutoSysUpdate, sizeof(struct ns__AutoSysUpdate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__AutoSysUpdate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strXmlFile && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strXmlFile", &a->strXmlFile, "xsd:string"))
				{	soap_flag_strXmlFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AutoSysUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AutoSysUpdate, 0, sizeof(struct ns__AutoSysUpdate), 0, soap_copy_ns__AutoSysUpdate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strXmlFile > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AutoSysUpdate(struct soap *soap, const struct ns__AutoSysUpdate *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AutoSysUpdate);
	if (soap_out_ns__AutoSysUpdate(soap, tag?tag:"ns:AutoSysUpdate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AutoSysUpdate * SOAP_FMAC4 soap_get_ns__AutoSysUpdate(struct soap *soap, struct ns__AutoSysUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AutoSysUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AutoSysUpdate * SOAP_FMAC2 soap_instantiate_ns__AutoSysUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AutoSysUpdate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AutoSysUpdate, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AutoSysUpdate);
		if (size)
			*size = sizeof(struct ns__AutoSysUpdate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AutoSysUpdate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AutoSysUpdate);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AutoSysUpdate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AutoSysUpdate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AutoSysUpdate %p -> %p\n", q, p));
	*(struct ns__AutoSysUpdate*)p = *(struct ns__AutoSysUpdate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HeartBeat(struct soap *soap, struct ns__HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns_HeartBeat(soap, &a->nsHeartBeat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HeartBeat(struct soap *soap, const struct ns__HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns_HeartBeat(soap, &a->nsHeartBeat);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HeartBeat(struct soap *soap, const char *tag, int id, const struct ns__HeartBeat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HeartBeat), type))
		return soap->error;
	if (soap_out_ns_HeartBeat(soap, "nsHeartBeat", -1, &a->nsHeartBeat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HeartBeat * SOAP_FMAC4 soap_in_ns__HeartBeat(struct soap *soap, const char *tag, struct ns__HeartBeat *a, const char *type)
{
	size_t soap_flag_nsHeartBeat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HeartBeat *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HeartBeat, sizeof(struct ns__HeartBeat), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__HeartBeat(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsHeartBeat && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns_HeartBeat(soap, "nsHeartBeat", &a->nsHeartBeat, "ns-HeartBeat"))
				{	soap_flag_nsHeartBeat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HeartBeat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HeartBeat, 0, sizeof(struct ns__HeartBeat), 0, soap_copy_ns__HeartBeat);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsHeartBeat > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HeartBeat(struct soap *soap, const struct ns__HeartBeat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HeartBeat);
	if (soap_out_ns__HeartBeat(soap, tag?tag:"ns:HeartBeat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HeartBeat * SOAP_FMAC4 soap_get_ns__HeartBeat(struct soap *soap, struct ns__HeartBeat *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HeartBeat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HeartBeat * SOAP_FMAC2 soap_instantiate_ns__HeartBeat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HeartBeat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HeartBeat, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HeartBeat);
		if (size)
			*size = sizeof(struct ns__HeartBeat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HeartBeat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HeartBeat);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HeartBeat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HeartBeat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HeartBeat %p -> %p\n", q, p));
	*(struct ns__HeartBeat*)p = *(struct ns__HeartBeat*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AbandonVideoRecord(struct soap *soap, struct ns__AbandonVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	soap_default_string(soap, &a->FileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AbandonVideoRecord(struct soap *soap, const struct ns__AbandonVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_string(soap, &a->FileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AbandonVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__AbandonVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AbandonVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_string(soap, "FileName", -1, &a->FileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AbandonVideoRecord * SOAP_FMAC4 soap_in_ns__AbandonVideoRecord(struct soap *soap, const char *tag, struct ns__AbandonVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_FileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AbandonVideoRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AbandonVideoRecord, sizeof(struct ns__AbandonVideoRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__AbandonVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_FileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "FileName", &a->FileName, "xsd:string"))
				{	soap_flag_FileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AbandonVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AbandonVideoRecord, 0, sizeof(struct ns__AbandonVideoRecord), 0, soap_copy_ns__AbandonVideoRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AbandonVideoRecord(struct soap *soap, const struct ns__AbandonVideoRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AbandonVideoRecord);
	if (soap_out_ns__AbandonVideoRecord(soap, tag?tag:"ns:AbandonVideoRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AbandonVideoRecord * SOAP_FMAC4 soap_get_ns__AbandonVideoRecord(struct soap *soap, struct ns__AbandonVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AbandonVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AbandonVideoRecord * SOAP_FMAC2 soap_instantiate_ns__AbandonVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AbandonVideoRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AbandonVideoRecord, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonVideoRecord);
		if (size)
			*size = sizeof(struct ns__AbandonVideoRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonVideoRecord[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AbandonVideoRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AbandonVideoRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AbandonVideoRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AbandonVideoRecord %p -> %p\n", q, p));
	*(struct ns__AbandonVideoRecord*)p = *(struct ns__AbandonVideoRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DownloadVideoRecord(struct soap *soap, struct ns__DownloadVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	soap_default_string(soap, &a->szFileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DownloadVideoRecord(struct soap *soap, const struct ns__DownloadVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_string(soap, &a->szFileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DownloadVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__DownloadVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DownloadVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_string(soap, "szFileName", -1, &a->szFileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DownloadVideoRecord * SOAP_FMAC4 soap_in_ns__DownloadVideoRecord(struct soap *soap, const char *tag, struct ns__DownloadVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_szFileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DownloadVideoRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DownloadVideoRecord, sizeof(struct ns__DownloadVideoRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__DownloadVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_szFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szFileName", &a->szFileName, "xsd:string"))
				{	soap_flag_szFileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DownloadVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DownloadVideoRecord, 0, sizeof(struct ns__DownloadVideoRecord), 0, soap_copy_ns__DownloadVideoRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DownloadVideoRecord(struct soap *soap, const struct ns__DownloadVideoRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DownloadVideoRecord);
	if (soap_out_ns__DownloadVideoRecord(soap, tag?tag:"ns:DownloadVideoRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DownloadVideoRecord * SOAP_FMAC4 soap_get_ns__DownloadVideoRecord(struct soap *soap, struct ns__DownloadVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DownloadVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DownloadVideoRecord * SOAP_FMAC2 soap_instantiate_ns__DownloadVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DownloadVideoRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DownloadVideoRecord, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecord);
		if (size)
			*size = sizeof(struct ns__DownloadVideoRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecord[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__DownloadVideoRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__DownloadVideoRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DownloadVideoRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DownloadVideoRecord %p -> %p\n", q, p));
	*(struct ns__DownloadVideoRecord*)p = *(struct ns__DownloadVideoRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DownloadVideoRecordResponse(struct soap *soap, struct ns__DownloadVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->OutFileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DownloadVideoRecordResponse(struct soap *soap, const struct ns__DownloadVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->OutFileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DownloadVideoRecordResponse(struct soap *soap, const char *tag, int id, const struct ns__DownloadVideoRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DownloadVideoRecordResponse), type))
		return soap->error;
	if (a->OutFileName)
	{	if (soap_out_string(soap, "OutFileName", -1, &a->OutFileName, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "OutFileName"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordResponse * SOAP_FMAC4 soap_in_ns__DownloadVideoRecordResponse(struct soap *soap, const char *tag, struct ns__DownloadVideoRecordResponse *a, const char *type)
{
	size_t soap_flag_OutFileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DownloadVideoRecordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DownloadVideoRecordResponse, sizeof(struct ns__DownloadVideoRecordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__DownloadVideoRecordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "OutFileName", &a->OutFileName, "xsd:string"))
				{	soap_flag_OutFileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DownloadVideoRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DownloadVideoRecordResponse, 0, sizeof(struct ns__DownloadVideoRecordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutFileName > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DownloadVideoRecordResponse(struct soap *soap, const struct ns__DownloadVideoRecordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DownloadVideoRecordResponse);
	if (soap_out_ns__DownloadVideoRecordResponse(soap, tag?tag:"ns:DownloadVideoRecordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordResponse * SOAP_FMAC4 soap_get_ns__DownloadVideoRecordResponse(struct soap *soap, struct ns__DownloadVideoRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DownloadVideoRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DownloadVideoRecordResponse * SOAP_FMAC2 soap_instantiate_ns__DownloadVideoRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DownloadVideoRecordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DownloadVideoRecordResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecordResponse);
		if (size)
			*size = sizeof(struct ns__DownloadVideoRecordResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DownloadVideoRecordResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__DownloadVideoRecordResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__DownloadVideoRecordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DownloadVideoRecordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DownloadVideoRecordResponse %p -> %p\n", q, p));
	*(struct ns__DownloadVideoRecordResponse*)p = *(struct ns__DownloadVideoRecordResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PlayVideoRecord(struct soap *soap, struct ns__PlayVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PlayVideoRecord(struct soap *soap, const struct ns__PlayVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_VIDEO_STREAM(soap, &a->Data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PlayVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__PlayVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PlayVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, "Data", -1, &a->Data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PlayVideoRecord * SOAP_FMAC4 soap_in_ns__PlayVideoRecord(struct soap *soap, const char *tag, struct ns__PlayVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PlayVideoRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PlayVideoRecord, sizeof(struct ns__PlayVideoRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__PlayVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, "Data", &a->Data, "ns:HBNET-VIDEO-STREAM"))
				{	soap_flag_Data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__PlayVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PlayVideoRecord, 0, sizeof(struct ns__PlayVideoRecord), 0, soap_copy_ns__PlayVideoRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PlayVideoRecord(struct soap *soap, const struct ns__PlayVideoRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__PlayVideoRecord);
	if (soap_out_ns__PlayVideoRecord(soap, tag?tag:"ns:PlayVideoRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PlayVideoRecord * SOAP_FMAC4 soap_get_ns__PlayVideoRecord(struct soap *soap, struct ns__PlayVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PlayVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__PlayVideoRecord * SOAP_FMAC2 soap_instantiate_ns__PlayVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PlayVideoRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__PlayVideoRecord, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PlayVideoRecord);
		if (size)
			*size = sizeof(struct ns__PlayVideoRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PlayVideoRecord[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__PlayVideoRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__PlayVideoRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__PlayVideoRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__PlayVideoRecord %p -> %p\n", q, p));
	*(struct ns__PlayVideoRecord*)p = *(struct ns__PlayVideoRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryVideoUrl(struct soap *soap, struct ns__QueryVideoUrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Param = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryVideoUrl(struct soap *soap, const struct ns__QueryVideoUrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, &a->Param);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryVideoUrl(struct soap *soap, const char *tag, int id, const struct ns__QueryVideoUrl *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryVideoUrl), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", -1, &a->Param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryVideoUrl * SOAP_FMAC4 soap_in_ns__QueryVideoUrl(struct soap *soap, const char *tag, struct ns__QueryVideoUrl *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryVideoUrl *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryVideoUrl, sizeof(struct ns__QueryVideoUrl), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__QueryVideoUrl(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", &a->Param, "ns:HBNET-RECOED-FILECOND"))
				{	soap_flag_Param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryVideoUrl *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__QueryVideoUrl, 0, sizeof(struct ns__QueryVideoUrl), 0, soap_copy_ns__QueryVideoUrl);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryVideoUrl(struct soap *soap, const struct ns__QueryVideoUrl *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__QueryVideoUrl);
	if (soap_out_ns__QueryVideoUrl(soap, tag?tag:"ns:QueryVideoUrl", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryVideoUrl * SOAP_FMAC4 soap_get_ns__QueryVideoUrl(struct soap *soap, struct ns__QueryVideoUrl *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryVideoUrl(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryVideoUrl * SOAP_FMAC2 soap_instantiate_ns__QueryVideoUrl(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryVideoUrl(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__QueryVideoUrl, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoUrl);
		if (size)
			*size = sizeof(struct ns__QueryVideoUrl);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoUrl[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__QueryVideoUrl);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__QueryVideoUrl*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryVideoUrl(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryVideoUrl %p -> %p\n", q, p));
	*(struct ns__QueryVideoUrl*)p = *(struct ns__QueryVideoUrl*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryVideoUrlResponse(struct soap *soap, struct ns__QueryVideoUrlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->RecodeList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryVideoUrlResponse(struct soap *soap, const struct ns__QueryVideoUrlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->RecodeList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryVideoUrlResponse(struct soap *soap, const char *tag, int id, const struct ns__QueryVideoUrlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryVideoUrlResponse), type))
		return soap->error;
	if (a->RecodeList)
	{	if (soap_out_string(soap, "RecodeList", -1, &a->RecodeList, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RecodeList"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryVideoUrlResponse * SOAP_FMAC4 soap_in_ns__QueryVideoUrlResponse(struct soap *soap, const char *tag, struct ns__QueryVideoUrlResponse *a, const char *type)
{
	size_t soap_flag_RecodeList = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryVideoUrlResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryVideoUrlResponse, sizeof(struct ns__QueryVideoUrlResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryVideoUrlResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RecodeList && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "RecodeList", &a->RecodeList, "xsd:string"))
				{	soap_flag_RecodeList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryVideoUrlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__QueryVideoUrlResponse, 0, sizeof(struct ns__QueryVideoUrlResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RecodeList > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryVideoUrlResponse(struct soap *soap, const struct ns__QueryVideoUrlResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__QueryVideoUrlResponse);
	if (soap_out_ns__QueryVideoUrlResponse(soap, tag?tag:"ns:QueryVideoUrlResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryVideoUrlResponse * SOAP_FMAC4 soap_get_ns__QueryVideoUrlResponse(struct soap *soap, struct ns__QueryVideoUrlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryVideoUrlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryVideoUrlResponse * SOAP_FMAC2 soap_instantiate_ns__QueryVideoUrlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryVideoUrlResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__QueryVideoUrlResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoUrlResponse);
		if (size)
			*size = sizeof(struct ns__QueryVideoUrlResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoUrlResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__QueryVideoUrlResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__QueryVideoUrlResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryVideoUrlResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryVideoUrlResponse %p -> %p\n", q, p));
	*(struct ns__QueryVideoUrlResponse*)p = *(struct ns__QueryVideoUrlResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryVideoRecord(struct soap *soap, struct ns__QueryVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Param = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryVideoRecord(struct soap *soap, const struct ns__QueryVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, &a->Param);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__QueryVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", -1, &a->Param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryVideoRecord * SOAP_FMAC4 soap_in_ns__QueryVideoRecord(struct soap *soap, const char *tag, struct ns__QueryVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryVideoRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryVideoRecord, sizeof(struct ns__QueryVideoRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__QueryVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", &a->Param, "ns:HBNET-RECOED-FILECOND"))
				{	soap_flag_Param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__QueryVideoRecord, 0, sizeof(struct ns__QueryVideoRecord), 0, soap_copy_ns__QueryVideoRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryVideoRecord(struct soap *soap, const struct ns__QueryVideoRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__QueryVideoRecord);
	if (soap_out_ns__QueryVideoRecord(soap, tag?tag:"ns:QueryVideoRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryVideoRecord * SOAP_FMAC4 soap_get_ns__QueryVideoRecord(struct soap *soap, struct ns__QueryVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryVideoRecord * SOAP_FMAC2 soap_instantiate_ns__QueryVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryVideoRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__QueryVideoRecord, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoRecord);
		if (size)
			*size = sizeof(struct ns__QueryVideoRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoRecord[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__QueryVideoRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__QueryVideoRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryVideoRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryVideoRecord %p -> %p\n", q, p));
	*(struct ns__QueryVideoRecord*)p = *(struct ns__QueryVideoRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryVideoRecordResponse(struct soap *soap, struct ns__QueryVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->RecodeList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryVideoRecordResponse(struct soap *soap, const struct ns__QueryVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->RecodeList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryVideoRecordResponse(struct soap *soap, const char *tag, int id, const struct ns__QueryVideoRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryVideoRecordResponse), type))
		return soap->error;
	if (a->RecodeList)
	{	if (soap_out_string(soap, "RecodeList", -1, &a->RecodeList, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RecodeList"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryVideoRecordResponse * SOAP_FMAC4 soap_in_ns__QueryVideoRecordResponse(struct soap *soap, const char *tag, struct ns__QueryVideoRecordResponse *a, const char *type)
{
	size_t soap_flag_RecodeList = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryVideoRecordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryVideoRecordResponse, sizeof(struct ns__QueryVideoRecordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryVideoRecordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RecodeList && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "RecodeList", &a->RecodeList, "xsd:string"))
				{	soap_flag_RecodeList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryVideoRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__QueryVideoRecordResponse, 0, sizeof(struct ns__QueryVideoRecordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RecodeList > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryVideoRecordResponse(struct soap *soap, const struct ns__QueryVideoRecordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__QueryVideoRecordResponse);
	if (soap_out_ns__QueryVideoRecordResponse(soap, tag?tag:"ns:QueryVideoRecordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryVideoRecordResponse * SOAP_FMAC4 soap_get_ns__QueryVideoRecordResponse(struct soap *soap, struct ns__QueryVideoRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryVideoRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryVideoRecordResponse * SOAP_FMAC2 soap_instantiate_ns__QueryVideoRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryVideoRecordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__QueryVideoRecordResponse, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoRecordResponse);
		if (size)
			*size = sizeof(struct ns__QueryVideoRecordResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryVideoRecordResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__QueryVideoRecordResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__QueryVideoRecordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryVideoRecordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryVideoRecordResponse %p -> %p\n", q, p));
	*(struct ns__QueryVideoRecordResponse*)p = *(struct ns__QueryVideoRecordResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AbandonCameraStream(struct soap *soap, struct ns__AbandonCameraStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AbandonCameraStream(struct soap *soap, const struct ns__AbandonCameraStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AbandonCameraStream(struct soap *soap, const char *tag, int id, const struct ns__AbandonCameraStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AbandonCameraStream), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AbandonCameraStream * SOAP_FMAC4 soap_in_ns__AbandonCameraStream(struct soap *soap, const char *tag, struct ns__AbandonCameraStream *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AbandonCameraStream *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AbandonCameraStream, sizeof(struct ns__AbandonCameraStream), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__AbandonCameraStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AbandonCameraStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AbandonCameraStream, 0, sizeof(struct ns__AbandonCameraStream), 0, soap_copy_ns__AbandonCameraStream);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AbandonCameraStream(struct soap *soap, const struct ns__AbandonCameraStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AbandonCameraStream);
	if (soap_out_ns__AbandonCameraStream(soap, tag?tag:"ns:AbandonCameraStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AbandonCameraStream * SOAP_FMAC4 soap_get_ns__AbandonCameraStream(struct soap *soap, struct ns__AbandonCameraStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AbandonCameraStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AbandonCameraStream * SOAP_FMAC2 soap_instantiate_ns__AbandonCameraStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AbandonCameraStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AbandonCameraStream, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonCameraStream);
		if (size)
			*size = sizeof(struct ns__AbandonCameraStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AbandonCameraStream[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AbandonCameraStream);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AbandonCameraStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AbandonCameraStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AbandonCameraStream %p -> %p\n", q, p));
	*(struct ns__AbandonCameraStream*)p = *(struct ns__AbandonCameraStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PTZCtrlCamera(struct soap *soap, struct ns__PTZCtrlCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PTZCtrlCamera(struct soap *soap, const struct ns__PTZCtrlCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_CAMERA_PTZCTRL(soap, &a->Data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PTZCtrlCamera(struct soap *soap, const char *tag, int id, const struct ns__PTZCtrlCamera *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PTZCtrlCamera), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(soap, "Data", -1, &a->Data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PTZCtrlCamera * SOAP_FMAC4 soap_in_ns__PTZCtrlCamera(struct soap *soap, const char *tag, struct ns__PTZCtrlCamera *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PTZCtrlCamera *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PTZCtrlCamera, sizeof(struct ns__PTZCtrlCamera), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__PTZCtrlCamera(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(soap, "Data", &a->Data, "ns:HBNET-CAMERA-PTZCTRL"))
				{	soap_flag_Data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__PTZCtrlCamera *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PTZCtrlCamera, 0, sizeof(struct ns__PTZCtrlCamera), 0, soap_copy_ns__PTZCtrlCamera);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PTZCtrlCamera(struct soap *soap, const struct ns__PTZCtrlCamera *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__PTZCtrlCamera);
	if (soap_out_ns__PTZCtrlCamera(soap, tag?tag:"ns:PTZCtrlCamera", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PTZCtrlCamera * SOAP_FMAC4 soap_get_ns__PTZCtrlCamera(struct soap *soap, struct ns__PTZCtrlCamera *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PTZCtrlCamera(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__PTZCtrlCamera * SOAP_FMAC2 soap_instantiate_ns__PTZCtrlCamera(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PTZCtrlCamera(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__PTZCtrlCamera, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PTZCtrlCamera);
		if (size)
			*size = sizeof(struct ns__PTZCtrlCamera);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PTZCtrlCamera[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__PTZCtrlCamera);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__PTZCtrlCamera*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__PTZCtrlCamera(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__PTZCtrlCamera %p -> %p\n", q, p));
	*(struct ns__PTZCtrlCamera*)p = *(struct ns__PTZCtrlCamera*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SwitchCameraToStream(struct soap *soap, struct ns__SwitchCameraToStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SwitchCameraToStream(struct soap *soap, const struct ns__SwitchCameraToStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SwitchCameraToStream(struct soap *soap, const char *tag, int id, const struct ns__SwitchCameraToStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SwitchCameraToStream), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SwitchCameraToStream * SOAP_FMAC4 soap_in_ns__SwitchCameraToStream(struct soap *soap, const char *tag, struct ns__SwitchCameraToStream *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SwitchCameraToStream *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SwitchCameraToStream, sizeof(struct ns__SwitchCameraToStream), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__SwitchCameraToStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SwitchCameraToStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SwitchCameraToStream, 0, sizeof(struct ns__SwitchCameraToStream), 0, soap_copy_ns__SwitchCameraToStream);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SwitchCameraToStream(struct soap *soap, const struct ns__SwitchCameraToStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SwitchCameraToStream);
	if (soap_out_ns__SwitchCameraToStream(soap, tag?tag:"ns:SwitchCameraToStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SwitchCameraToStream * SOAP_FMAC4 soap_get_ns__SwitchCameraToStream(struct soap *soap, struct ns__SwitchCameraToStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SwitchCameraToStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SwitchCameraToStream * SOAP_FMAC2 soap_instantiate_ns__SwitchCameraToStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SwitchCameraToStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SwitchCameraToStream, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__SwitchCameraToStream);
		if (size)
			*size = sizeof(struct ns__SwitchCameraToStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__SwitchCameraToStream[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__SwitchCameraToStream);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__SwitchCameraToStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SwitchCameraToStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SwitchCameraToStream %p -> %p\n", q, p));
	*(struct ns__SwitchCameraToStream*)p = *(struct ns__SwitchCameraToStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns_HeartBeat(struct soap *soap, struct ns_HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strUser);
	soap_default_unsignedLong(soap, &a->ulCameraID);
	soap_default_int(soap, &a->nPlayType);
	soap_default_std__string(soap, &a->strFileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns_HeartBeat(struct soap *soap, const struct ns_HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strUser, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strUser);
	soap_embedded(soap, &a->strFileName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strFileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns_HeartBeat(struct soap *soap, const char *tag, int id, const struct ns_HeartBeat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns_HeartBeat), type))
		return soap->error;
	if (soap_out_std__string(soap, "strUser", -1, &a->strUser, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCameraID", -1, &a->ulCameraID, ""))
		return soap->error;
	if (soap_out_int(soap, "nPlayType", -1, &a->nPlayType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strFileName", -1, &a->strFileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns_HeartBeat * SOAP_FMAC4 soap_in_ns_HeartBeat(struct soap *soap, const char *tag, struct ns_HeartBeat *a, const char *type)
{
	size_t soap_flag_strUser = 1;
	size_t soap_flag_ulCameraID = 1;
	size_t soap_flag_nPlayType = 1;
	size_t soap_flag_strFileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns_HeartBeat *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns_HeartBeat, sizeof(struct ns_HeartBeat), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns_HeartBeat(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUser && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strUser", &a->strUser, "xsd:string"))
				{	soap_flag_strUser--;
					continue;
				}
			if (soap_flag_ulCameraID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCameraID", &a->ulCameraID, "xsd:unsignedLong"))
				{	soap_flag_ulCameraID--;
					continue;
				}
			if (soap_flag_nPlayType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nPlayType", &a->nPlayType, "xsd:int"))
				{	soap_flag_nPlayType--;
					continue;
				}
			if (soap_flag_strFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strFileName", &a->strFileName, "xsd:string"))
				{	soap_flag_strFileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns_HeartBeat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns_HeartBeat, 0, sizeof(struct ns_HeartBeat), 0, soap_copy_ns_HeartBeat);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strUser > 0 || soap_flag_ulCameraID > 0 || soap_flag_nPlayType > 0 || soap_flag_strFileName > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns_HeartBeat(struct soap *soap, const struct ns_HeartBeat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns_HeartBeat);
	if (soap_out_ns_HeartBeat(soap, tag?tag:"ns-HeartBeat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns_HeartBeat * SOAP_FMAC4 soap_get_ns_HeartBeat(struct soap *soap, struct ns_HeartBeat *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns_HeartBeat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns_HeartBeat * SOAP_FMAC2 soap_instantiate_ns_HeartBeat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns_HeartBeat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns_HeartBeat, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns_HeartBeat);
		if (size)
			*size = sizeof(struct ns_HeartBeat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns_HeartBeat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns_HeartBeat);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns_HeartBeat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns_HeartBeat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns_HeartBeat %p -> %p\n", q, p));
	*(struct ns_HeartBeat*)p = *(struct ns_HeartBeat*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBUSERINFO(struct soap *soap, struct ns__HBUSERINFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strUser);
	soap_default_int(soap, &a->nPermission);
	soap_default_int(soap, &a->nCtrlTimeOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBUSERINFO(struct soap *soap, const struct ns__HBUSERINFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strUser, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strUser);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBUSERINFO(struct soap *soap, const char *tag, int id, const struct ns__HBUSERINFO *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBUSERINFO), type))
		return soap->error;
	if (soap_out_std__string(soap, "strUser", -1, &a->strUser, ""))
		return soap->error;
	if (soap_out_int(soap, "nPermission", -1, &a->nPermission, ""))
		return soap->error;
	if (soap_out_int(soap, "nCtrlTimeOut", -1, &a->nCtrlTimeOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBUSERINFO * SOAP_FMAC4 soap_in_ns__HBUSERINFO(struct soap *soap, const char *tag, struct ns__HBUSERINFO *a, const char *type)
{
	size_t soap_flag_strUser = 1;
	size_t soap_flag_nPermission = 1;
	size_t soap_flag_nCtrlTimeOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBUSERINFO *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBUSERINFO, sizeof(struct ns__HBUSERINFO), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__HBUSERINFO(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUser && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strUser", &a->strUser, "xsd:string"))
				{	soap_flag_strUser--;
					continue;
				}
			if (soap_flag_nPermission && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nPermission", &a->nPermission, "xsd:int"))
				{	soap_flag_nPermission--;
					continue;
				}
			if (soap_flag_nCtrlTimeOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nCtrlTimeOut", &a->nCtrlTimeOut, "xsd:int"))
				{	soap_flag_nCtrlTimeOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBUSERINFO *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBUSERINFO, 0, sizeof(struct ns__HBUSERINFO), 0, soap_copy_ns__HBUSERINFO);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strUser > 0 || soap_flag_nPermission > 0 || soap_flag_nCtrlTimeOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBUSERINFO(struct soap *soap, const struct ns__HBUSERINFO *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBUSERINFO);
	if (soap_out_ns__HBUSERINFO(soap, tag?tag:"ns:HBUSERINFO", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBUSERINFO * SOAP_FMAC4 soap_get_ns__HBUSERINFO(struct soap *soap, struct ns__HBUSERINFO *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBUSERINFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBUSERINFO * SOAP_FMAC2 soap_instantiate_ns__HBUSERINFO(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBUSERINFO(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBUSERINFO, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBUSERINFO);
		if (size)
			*size = sizeof(struct ns__HBUSERINFO);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBUSERINFO[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBUSERINFO);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBUSERINFO*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBUSERINFO(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBUSERINFO %p -> %p\n", q, p));
	*(struct ns__HBUSERINFO*)p = *(struct ns__HBUSERINFO*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_CAMREA_INFO(struct soap *soap, struct ns__HBNET_CAMREA_INFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulCamNumber);
	soap_default_unsignedLong(soap, &a->ulCamID);
	soap_default_unsignedLong(soap, &a->ulCamDepartmentID);
	soap_default_std__string(soap, &a->strCamName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_CAMREA_INFO(struct soap *soap, const struct ns__HBNET_CAMREA_INFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strCamName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCamName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_CAMREA_INFO(struct soap *soap, const char *tag, int id, const struct ns__HBNET_CAMREA_INFO *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_CAMREA_INFO), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamNumber", -1, &a->ulCamNumber, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamID", -1, &a->ulCamID, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamDepartmentID", -1, &a->ulCamDepartmentID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strCamName", -1, &a->strCamName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_CAMREA_INFO * SOAP_FMAC4 soap_in_ns__HBNET_CAMREA_INFO(struct soap *soap, const char *tag, struct ns__HBNET_CAMREA_INFO *a, const char *type)
{
	size_t soap_flag_ulCamNumber = 1;
	size_t soap_flag_ulCamID = 1;
	size_t soap_flag_ulCamDepartmentID = 1;
	size_t soap_flag_strCamName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_CAMREA_INFO *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_CAMREA_INFO, sizeof(struct ns__HBNET_CAMREA_INFO), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_CAMREA_INFO(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulCamNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamNumber", &a->ulCamNumber, "xsd:unsignedLong"))
				{	soap_flag_ulCamNumber--;
					continue;
				}
			if (soap_flag_ulCamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamID", &a->ulCamID, "xsd:unsignedLong"))
				{	soap_flag_ulCamID--;
					continue;
				}
			if (soap_flag_ulCamDepartmentID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamDepartmentID", &a->ulCamDepartmentID, "xsd:unsignedLong"))
				{	soap_flag_ulCamDepartmentID--;
					continue;
				}
			if (soap_flag_strCamName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCamName", &a->strCamName, "xsd:string"))
				{	soap_flag_strCamName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_CAMREA_INFO *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_CAMREA_INFO, 0, sizeof(struct ns__HBNET_CAMREA_INFO), 0, soap_copy_ns__HBNET_CAMREA_INFO);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulCamNumber > 0 || soap_flag_ulCamID > 0 || soap_flag_ulCamDepartmentID > 0 || soap_flag_strCamName > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_CAMREA_INFO(struct soap *soap, const struct ns__HBNET_CAMREA_INFO *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBNET_CAMREA_INFO);
	if (soap_out_ns__HBNET_CAMREA_INFO(soap, tag?tag:"ns:HBNET-CAMREA-INFO", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_CAMREA_INFO * SOAP_FMAC4 soap_get_ns__HBNET_CAMREA_INFO(struct soap *soap, struct ns__HBNET_CAMREA_INFO *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_CAMREA_INFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBNET_CAMREA_INFO * SOAP_FMAC2 soap_instantiate_ns__HBNET_CAMREA_INFO(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_CAMREA_INFO(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBNET_CAMREA_INFO, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_CAMREA_INFO);
		if (size)
			*size = sizeof(struct ns__HBNET_CAMREA_INFO);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_CAMREA_INFO[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBNET_CAMREA_INFO);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBNET_CAMREA_INFO*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBNET_CAMREA_INFO(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBNET_CAMREA_INFO %p -> %p\n", q, p));
	*(struct ns__HBNET_CAMREA_INFO*)p = *(struct ns__HBNET_CAMREA_INFO*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulCamNumber);
	soap_default_unsignedLong(soap, &a->ulStartTime);
	soap_default_unsignedLong(soap, &a->ulStopTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_RECOED_FILECOND(struct soap *soap, const struct ns__HBNET_RECOED_FILECOND *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, int id, const struct ns__HBNET_RECOED_FILECOND *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamNumber", -1, &a->ulCamNumber, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulStartTime", -1, &a->ulStartTime, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulStopTime", -1, &a->ulStopTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND * SOAP_FMAC4 soap_in_ns__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_FILECOND *a, const char *type)
{
	size_t soap_flag_ulCamNumber = 1;
	size_t soap_flag_ulStartTime = 1;
	size_t soap_flag_ulStopTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_RECOED_FILECOND *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, sizeof(struct ns__HBNET_RECOED_FILECOND), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_RECOED_FILECOND(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulCamNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamNumber", &a->ulCamNumber, "xsd:unsignedLong"))
				{	soap_flag_ulCamNumber--;
					continue;
				}
			if (soap_flag_ulStartTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulStartTime", &a->ulStartTime, "xsd:unsignedLong"))
				{	soap_flag_ulStartTime--;
					continue;
				}
			if (soap_flag_ulStopTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulStopTime", &a->ulStopTime, "xsd:unsignedLong"))
				{	soap_flag_ulStopTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_FILECOND *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, 0, sizeof(struct ns__HBNET_RECOED_FILECOND), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulCamNumber > 0 || soap_flag_ulStartTime > 0 || soap_flag_ulStopTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_RECOED_FILECOND(struct soap *soap, const struct ns__HBNET_RECOED_FILECOND *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBNET_RECOED_FILECOND);
	if (soap_out_ns__HBNET_RECOED_FILECOND(soap, tag?tag:"ns:HBNET-RECOED-FILECOND", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND * SOAP_FMAC4 soap_get_ns__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_RECOED_FILECOND(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBNET_RECOED_FILECOND * SOAP_FMAC2 soap_instantiate_ns__HBNET_RECOED_FILECOND(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_RECOED_FILECOND(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_RECOED_FILECOND);
		if (size)
			*size = sizeof(struct ns__HBNET_RECOED_FILECOND);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_RECOED_FILECOND[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBNET_RECOED_FILECOND);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBNET_RECOED_FILECOND*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBNET_RECOED_FILECOND(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBNET_RECOED_FILECOND %p -> %p\n", q, p));
	*(struct ns__HBNET_RECOED_FILECOND*)p = *(struct ns__HBNET_RECOED_FILECOND*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulControlCode);
	soap_default_unsignedLong(soap, &a->ulInValue);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const struct ns__HBNET_RECOED_PLAYCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const char *tag, int id, const struct ns__HBNET_RECOED_PLAYCTRL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulControlCode", -1, &a->ulControlCode, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulInValue", -1, &a->ulInValue, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_PLAYCTRL * SOAP_FMAC4 soap_in_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_PLAYCTRL *a, const char *type)
{
	size_t soap_flag_ulControlCode = 1;
	size_t soap_flag_ulInValue = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_RECOED_PLAYCTRL *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, sizeof(struct ns__HBNET_RECOED_PLAYCTRL), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_RECOED_PLAYCTRL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulControlCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulControlCode", &a->ulControlCode, "xsd:unsignedLong"))
				{	soap_flag_ulControlCode--;
					continue;
				}
			if (soap_flag_ulInValue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulInValue", &a->ulInValue, "xsd:unsignedLong"))
				{	soap_flag_ulInValue--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_PLAYCTRL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, 0, sizeof(struct ns__HBNET_RECOED_PLAYCTRL), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulControlCode > 0 || soap_flag_ulInValue > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const struct ns__HBNET_RECOED_PLAYCTRL *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL);
	if (soap_out_ns__HBNET_RECOED_PLAYCTRL(soap, tag?tag:"ns:HBNET-RECOED-PLAYCTRL", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_PLAYCTRL * SOAP_FMAC4 soap_get_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBNET_RECOED_PLAYCTRL * SOAP_FMAC2 soap_instantiate_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_RECOED_PLAYCTRL(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_RECOED_PLAYCTRL);
		if (size)
			*size = sizeof(struct ns__HBNET_RECOED_PLAYCTRL);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_RECOED_PLAYCTRL[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBNET_RECOED_PLAYCTRL);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBNET_RECOED_PLAYCTRL*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBNET_RECOED_PLAYCTRL %p -> %p\n", q, p));
	*(struct ns__HBNET_RECOED_PLAYCTRL*)p = *(struct ns__HBNET_RECOED_PLAYCTRL*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulCamNumber);
	soap_default_unsignedLong(soap, &a->ulVS1);
	soap_default_unsignedLong(soap, &a->ulVS2);
	soap_default_unsignedLong(soap, &a->ulVS3);
	soap_default_unsignedLong(soap, &a->ulVS4);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const struct ns__HBNET_CAMERA_PTZCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, int id, const struct ns__HBNET_CAMERA_PTZCTRL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamNumber", -1, &a->ulCamNumber, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS1", -1, &a->ulVS1, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS2", -1, &a->ulVS2, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS3", -1, &a->ulVS3, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS4", -1, &a->ulVS4, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL * SOAP_FMAC4 soap_in_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, struct ns__HBNET_CAMERA_PTZCTRL *a, const char *type)
{
	size_t soap_flag_ulCamNumber = 1;
	size_t soap_flag_ulVS1 = 1;
	size_t soap_flag_ulVS2 = 1;
	size_t soap_flag_ulVS3 = 1;
	size_t soap_flag_ulVS4 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_CAMERA_PTZCTRL *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, sizeof(struct ns__HBNET_CAMERA_PTZCTRL), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_CAMERA_PTZCTRL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulCamNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamNumber", &a->ulCamNumber, "xsd:unsignedLong"))
				{	soap_flag_ulCamNumber--;
					continue;
				}
			if (soap_flag_ulVS1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS1", &a->ulVS1, "xsd:unsignedLong"))
				{	soap_flag_ulVS1--;
					continue;
				}
			if (soap_flag_ulVS2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS2", &a->ulVS2, "xsd:unsignedLong"))
				{	soap_flag_ulVS2--;
					continue;
				}
			if (soap_flag_ulVS3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS3", &a->ulVS3, "xsd:unsignedLong"))
				{	soap_flag_ulVS3--;
					continue;
				}
			if (soap_flag_ulVS4 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS4", &a->ulVS4, "xsd:unsignedLong"))
				{	soap_flag_ulVS4--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_CAMERA_PTZCTRL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, 0, sizeof(struct ns__HBNET_CAMERA_PTZCTRL), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulCamNumber > 0 || soap_flag_ulVS1 > 0 || soap_flag_ulVS2 > 0 || soap_flag_ulVS3 > 0 || soap_flag_ulVS4 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const struct ns__HBNET_CAMERA_PTZCTRL *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL);
	if (soap_out_ns__HBNET_CAMERA_PTZCTRL(soap, tag?tag:"ns:HBNET-CAMERA-PTZCTRL", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL * SOAP_FMAC4 soap_get_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBNET_CAMERA_PTZCTRL * SOAP_FMAC2 soap_instantiate_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_CAMERA_PTZCTRL(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_CAMERA_PTZCTRL);
		if (size)
			*size = sizeof(struct ns__HBNET_CAMERA_PTZCTRL);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_CAMERA_PTZCTRL[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBNET_CAMERA_PTZCTRL);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBNET_CAMERA_PTZCTRL*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBNET_CAMERA_PTZCTRL %p -> %p\n", q, p));
	*(struct ns__HBNET_CAMERA_PTZCTRL*)p = *(struct ns__HBNET_CAMERA_PTZCTRL*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->vsfStreamType);
	soap_default_string(soap, &a->szDescription);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM_RESP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->szDescription);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, int id, const struct ns__HBNET_VIDEO_STREAM_RESP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP), type))
		return soap->error;
	if (soap_out_int(soap, "vsfStreamType", -1, &a->vsfStreamType, ""))
		return soap->error;
	if (soap_out_string(soap, "szDescription", -1, &a->szDescription, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP * SOAP_FMAC4 soap_in_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM_RESP *a, const char *type)
{
	size_t soap_flag_vsfStreamType = 1;
	size_t soap_flag_szDescription = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_VIDEO_STREAM_RESP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_VIDEO_STREAM_RESP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vsfStreamType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "vsfStreamType", &a->vsfStreamType, "xsd:int"))
				{	soap_flag_vsfStreamType--;
					continue;
				}
			if (soap_flag_szDescription && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szDescription", &a->szDescription, "xsd:string"))
				{	soap_flag_szDescription--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM_RESP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, 0, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vsfStreamType > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM_RESP *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP);
	if (soap_out_ns__HBNET_VIDEO_STREAM_RESP(soap, tag?tag:"ns:HBNET-VIDEO-STREAM-RESP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP * SOAP_FMAC4 soap_get_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBNET_VIDEO_STREAM_RESP * SOAP_FMAC2 soap_instantiate_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_VIDEO_STREAM_RESP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_VIDEO_STREAM_RESP);
		if (size)
			*size = sizeof(struct ns__HBNET_VIDEO_STREAM_RESP);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_VIDEO_STREAM_RESP[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBNET_VIDEO_STREAM_RESP);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBNET_VIDEO_STREAM_RESP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBNET_VIDEO_STREAM_RESP %p -> %p\n", q, p));
	*(struct ns__HBNET_VIDEO_STREAM_RESP*)p = *(struct ns__HBNET_VIDEO_STREAM_RESP*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->vsfStreamType);
	soap_default_string(soap, &a->szDescription);
	soap_default_string(soap, &a->szClientIP);
	soap_default_int(soap, &a->lClientPort);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_VIDEO_STREAM(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->szDescription);
	soap_serialize_string(soap, &a->szClientIP);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, int id, const struct ns__HBNET_VIDEO_STREAM *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM), type))
		return soap->error;
	if (soap_out_int(soap, "vsfStreamType", -1, &a->vsfStreamType, ""))
		return soap->error;
	if (soap_out_string(soap, "szDescription", -1, &a->szDescription, ""))
		return soap->error;
	if (soap_out_string(soap, "szClientIP", -1, &a->szClientIP, ""))
		return soap->error;
	if (soap_out_int(soap, "lClientPort", -1, &a->lClientPort, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM * SOAP_FMAC4 soap_in_ns__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM *a, const char *type)
{
	size_t soap_flag_vsfStreamType = 1;
	size_t soap_flag_szDescription = 1;
	size_t soap_flag_szClientIP = 1;
	size_t soap_flag_lClientPort = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_VIDEO_STREAM *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, sizeof(struct ns__HBNET_VIDEO_STREAM), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_VIDEO_STREAM(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vsfStreamType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "vsfStreamType", &a->vsfStreamType, "xsd:int"))
				{	soap_flag_vsfStreamType--;
					continue;
				}
			if (soap_flag_szDescription && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szDescription", &a->szDescription, "xsd:string"))
				{	soap_flag_szDescription--;
					continue;
				}
			if (soap_flag_szClientIP && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szClientIP", &a->szClientIP, "xsd:string"))
				{	soap_flag_szClientIP--;
					continue;
				}
			if (soap_flag_lClientPort && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "lClientPort", &a->lClientPort, "xsd:int"))
				{	soap_flag_lClientPort--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, 0, sizeof(struct ns__HBNET_VIDEO_STREAM), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vsfStreamType > 0 || soap_flag_lClientPort > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_VIDEO_STREAM(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__HBNET_VIDEO_STREAM);
	if (soap_out_ns__HBNET_VIDEO_STREAM(soap, tag?tag:"ns:HBNET-VIDEO-STREAM", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM * SOAP_FMAC4 soap_get_ns__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_VIDEO_STREAM(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__HBNET_VIDEO_STREAM * SOAP_FMAC2 soap_instantiate_ns__HBNET_VIDEO_STREAM(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_VIDEO_STREAM(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_VIDEO_STREAM);
		if (size)
			*size = sizeof(struct ns__HBNET_VIDEO_STREAM);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__HBNET_VIDEO_STREAM[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__HBNET_VIDEO_STREAM);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__HBNET_VIDEO_STREAM*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__HBNET_VIDEO_STREAM(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__HBNET_VIDEO_STREAM %p -> %p\n", q, p));
	*(struct ns__HBNET_VIDEO_STREAM*)p = *(struct ns__HBNET_VIDEO_STREAM*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Response(struct soap *soap, struct ns__Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->retcode);
	soap_default_std__string(soap, &a->strMessage);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Response(struct soap *soap, const struct ns__Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->strMessage, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strMessage);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Response(struct soap *soap, const char *tag, int id, const struct ns__Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Response), type))
		return soap->error;
	if (soap_out_int(soap, "retcode", -1, &a->retcode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strMessage", -1, &a->strMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Response * SOAP_FMAC4 soap_in_ns__Response(struct soap *soap, const char *tag, struct ns__Response *a, const char *type)
{
	size_t soap_flag_retcode = 1;
	size_t soap_flag_strMessage = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Response, sizeof(struct ns__Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "retcode", &a->retcode, "xsd:int"))
				{	soap_flag_retcode--;
					continue;
				}
			if (soap_flag_strMessage && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strMessage", &a->strMessage, "xsd:string"))
				{	soap_flag_strMessage--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Response, 0, sizeof(struct ns__Response), 0, soap_copy_ns__Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retcode > 0 || soap_flag_strMessage > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Response(struct soap *soap, const struct ns__Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Response);
	if (soap_out_ns__Response(soap, tag?tag:"ns:Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Response * SOAP_FMAC4 soap_get_ns__Response(struct soap *soap, struct ns__Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Response * SOAP_FMAC2 soap_instantiate_ns__Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Response, n, Base_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Response);
		if (size)
			*size = sizeof(struct ns__Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Response %p -> %p\n", q, p));
	*(struct ns__Response*)p = *(struct ns__Response*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct SOAP_ENV__Reason *)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, *a);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct SOAP_ENV__Detail *)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, *a);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct SOAP_ENV__Code *)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, *a);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTonsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_nsCXF__getDataCxfResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTonsCXF__getDataCxfResponse(struct soap *soap, const char *tag, int id, nsCXF__getDataCxfResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_nsCXF__getDataCxfResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse ** SOAP_FMAC4 soap_in_PointerTonsCXF__getDataCxfResponse(struct soap *soap, const char *tag, nsCXF__getDataCxfResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (nsCXF__getDataCxfResponse **)soap_malloc(soap, sizeof(nsCXF__getDataCxfResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (nsCXF__getDataCxfResponse *)soap_instantiate_nsCXF__getDataCxfResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	nsCXF__getDataCxfResponse ** p = (nsCXF__getDataCxfResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_nsCXF__getDataCxfResponse, sizeof(nsCXF__getDataCxfResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTonsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTonsCXF__getDataCxfResponse);
	if (soap_out_PointerTonsCXF__getDataCxfResponse(soap, tag?tag:"nsCXF:getDataCxfResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse ** SOAP_FMAC4 soap_get_PointerTonsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTonsCXF__getDataCxfResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTonsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_nsCXF__getDataCxf))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTonsCXF__getDataCxf(struct soap *soap, const char *tag, int id, nsCXF__getDataCxf *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_nsCXF__getDataCxf);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 nsCXF__getDataCxf ** SOAP_FMAC4 soap_in_PointerTonsCXF__getDataCxf(struct soap *soap, const char *tag, nsCXF__getDataCxf **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (nsCXF__getDataCxf **)soap_malloc(soap, sizeof(nsCXF__getDataCxf *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (nsCXF__getDataCxf *)soap_instantiate_nsCXF__getDataCxf(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	nsCXF__getDataCxf ** p = (nsCXF__getDataCxf **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_nsCXF__getDataCxf, sizeof(nsCXF__getDataCxf), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTonsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTonsCXF__getDataCxf);
	if (soap_out_PointerTonsCXF__getDataCxf(soap, tag?tag:"nsCXF:getDataCxf", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 nsCXF__getDataCxf ** SOAP_FMAC4 soap_get_PointerTonsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTonsCXF__getDataCxf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getDataResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getDataResponse(struct soap *soap, const char *tag, int id, _ns1__getDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getDataResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getDataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getDataResponse(struct soap *soap, const char *tag, _ns1__getDataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getDataResponse **)soap_malloc(soap, sizeof(_ns1__getDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getDataResponse *)soap_instantiate__ns1__getDataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getDataResponse ** p = (_ns1__getDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getDataResponse, sizeof(_ns1__getDataResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getDataResponse);
	if (soap_out_PointerTo_ns1__getDataResponse(soap, tag?tag:"ns1:getDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getDataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getData(struct soap *soap, _ns1__getData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getData(struct soap *soap, const char *tag, int id, _ns1__getData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getData ** SOAP_FMAC4 soap_in_PointerTo_ns1__getData(struct soap *soap, const char *tag, _ns1__getData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getData **)soap_malloc(soap, sizeof(_ns1__getData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getData *)soap_instantiate__ns1__getData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getData ** p = (_ns1__getData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getData, sizeof(_ns1__getData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getData(struct soap *soap, _ns1__getData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getData);
	if (soap_out_PointerTo_ns1__getData(soap, tag?tag:"ns1:getData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getData ** SOAP_FMAC4 soap_get_PointerTo_ns1__getData(struct soap *soap, _ns1__getData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL))
		soap_serialize_ns__HBNET_RECOED_PLAYCTRL(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_RECOED_PLAYCTRL(struct soap *soap, const char *tag, int id, struct ns__HBNET_RECOED_PLAYCTRL *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_RECOED_PLAYCTRL(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_PLAYCTRL ** SOAP_FMAC4 soap_in_PointerTons__HBNET_RECOED_PLAYCTRL(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_PLAYCTRL **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_RECOED_PLAYCTRL **)soap_malloc(soap, sizeof(struct ns__HBNET_RECOED_PLAYCTRL *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct ns__HBNET_RECOED_PLAYCTRL *)soap_malloc(soap, sizeof(struct ns__HBNET_RECOED_PLAYCTRL));
		soap_default_ns__HBNET_RECOED_PLAYCTRL(soap, *a);
		if (!(*a = soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_PLAYCTRL **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, sizeof(struct ns__HBNET_RECOED_PLAYCTRL), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__HBNET_RECOED_PLAYCTRL);
	if (soap_out_PointerTons__HBNET_RECOED_PLAYCTRL(soap, tag?tag:"ns:HBNET-RECOED-PLAYCTRL", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_PLAYCTRL ** SOAP_FMAC4 soap_get_PointerTons__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_RECOED_PLAYCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP))
		soap_serialize_ns__HBNET_VIDEO_STREAM_RESP(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, int id, struct ns__HBNET_VIDEO_STREAM_RESP *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP ** SOAP_FMAC4 soap_in_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM_RESP **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_VIDEO_STREAM_RESP **)soap_malloc(soap, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct ns__HBNET_VIDEO_STREAM_RESP *)soap_malloc(soap, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP));
		soap_default_ns__HBNET_VIDEO_STREAM_RESP(soap, *a);
		if (!(*a = soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM_RESP **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP);
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, tag?tag:"ns:HBNET-VIDEO-STREAM-RESP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP ** SOAP_FMAC4 soap_get_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND))
		soap_serialize_ns__HBNET_RECOED_FILECOND(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, int id, struct ns__HBNET_RECOED_FILECOND *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_RECOED_FILECOND);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_RECOED_FILECOND(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND ** SOAP_FMAC4 soap_in_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_FILECOND **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_RECOED_FILECOND **)soap_malloc(soap, sizeof(struct ns__HBNET_RECOED_FILECOND *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct ns__HBNET_RECOED_FILECOND *)soap_malloc(soap, sizeof(struct ns__HBNET_RECOED_FILECOND));
		soap_default_ns__HBNET_RECOED_FILECOND(soap, *a);
		if (!(*a = soap_in_ns__HBNET_RECOED_FILECOND(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_FILECOND **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, sizeof(struct ns__HBNET_RECOED_FILECOND), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND);
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, tag?tag:"ns:HBNET-RECOED-FILECOND", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND ** SOAP_FMAC4 soap_get_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Response(struct soap *soap, struct ns__Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__Response))
		soap_serialize_ns__Response(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Response(struct soap *soap, const char *tag, int id, struct ns__Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__Response);
	if (id < 0)
		return soap->error;
	return soap_out_ns__Response(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__Response ** SOAP_FMAC4 soap_in_PointerTons__Response(struct soap *soap, const char *tag, struct ns__Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__Response **)soap_malloc(soap, sizeof(struct ns__Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct ns__Response *)soap_malloc(soap, sizeof(struct ns__Response));
		soap_default_ns__Response(soap, *a);
		if (!(*a = soap_in_ns__Response(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__Response, sizeof(struct ns__Response), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Response(struct soap *soap, struct ns__Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__Response);
	if (soap_out_PointerTons__Response(soap, tag?tag:"ns:Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Response ** SOAP_FMAC4 soap_get_PointerTons__Response(struct soap *soap, struct ns__Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL))
		soap_serialize_ns__HBNET_CAMERA_PTZCTRL(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, int id, struct ns__HBNET_CAMERA_PTZCTRL *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_CAMERA_PTZCTRL(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL ** SOAP_FMAC4 soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, struct ns__HBNET_CAMERA_PTZCTRL **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_CAMERA_PTZCTRL **)soap_malloc(soap, sizeof(struct ns__HBNET_CAMERA_PTZCTRL *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct ns__HBNET_CAMERA_PTZCTRL *)soap_malloc(soap, sizeof(struct ns__HBNET_CAMERA_PTZCTRL));
		soap_default_ns__HBNET_CAMERA_PTZCTRL(soap, *a);
		if (!(*a = soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_CAMERA_PTZCTRL **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, sizeof(struct ns__HBNET_CAMERA_PTZCTRL), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL);
	if (soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(soap, tag?tag:"ns:HBNET-CAMERA-PTZCTRL", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL ** SOAP_FMAC4 soap_get_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM))
		soap_serialize_ns__HBNET_VIDEO_STREAM(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, int id, struct ns__HBNET_VIDEO_STREAM *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_VIDEO_STREAM);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_VIDEO_STREAM(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM ** SOAP_FMAC4 soap_in_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_VIDEO_STREAM **)soap_malloc(soap, sizeof(struct ns__HBNET_VIDEO_STREAM *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct ns__HBNET_VIDEO_STREAM *)soap_malloc(soap, sizeof(struct ns__HBNET_VIDEO_STREAM));
		soap_default_ns__HBNET_VIDEO_STREAM(soap, *a);
		if (!(*a = soap_in_ns__HBNET_VIDEO_STREAM(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, sizeof(struct ns__HBNET_VIDEO_STREAM), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM);
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, tag?tag:"ns:HBNET-VIDEO-STREAM", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM ** SOAP_FMAC4 soap_get_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of BaseC.cpp */
